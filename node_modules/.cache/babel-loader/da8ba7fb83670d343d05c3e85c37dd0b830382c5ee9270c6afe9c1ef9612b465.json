{"ast":null,"code":"// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array,\n  u16 = Uint16Array,\n  u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */0, 0, /* impossible */0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n  var b = new u16(31);\n  for (var i = 0; i < 31; ++i) {\n    b[i] = start += 1 << eb[i - 1];\n  }\n  // numbers here are at max 18 bits\n  var r = new u32(b[30]);\n  for (var i = 1; i < 30; ++i) {\n    for (var j = b[i]; j < b[i + 1]; ++j) {\n      r[j] = j - b[i] << 5 | i;\n    }\n  }\n  return [b, r];\n};\nvar _a = freb(fleb, 2),\n  fl = _a[0],\n  revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0),\n  fd = _b[0],\n  revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n  // reverse table algorithm from SO\n  var x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;\n  x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;\n  x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;\n  rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = function (cd, mb, r) {\n  var s = cd.length;\n  // index\n  var i = 0;\n  // u16 \"map\": index -> # of codes with bit length = index\n  var l = new u16(mb);\n  // length of cd must be 288 (total # of codes)\n  for (; i < s; ++i) ++l[cd[i] - 1];\n  // u16 \"map\": index -> minimum code for bit length = index\n  var le = new u16(mb);\n  for (i = 0; i < mb; ++i) {\n    le[i] = le[i - 1] + l[i - 1] << 1;\n  }\n  var co;\n  if (r) {\n    // u16 \"map\": index -> number of actual bits, symbol for code\n    co = new u16(1 << mb);\n    // bits to remove for reverser\n    var rvb = 15 - mb;\n    for (i = 0; i < s; ++i) {\n      // ignore 0 lengths\n      if (cd[i]) {\n        // num encoding both symbol and bits read\n        var sv = i << 4 | cd[i];\n        // free bits\n        var r_1 = mb - cd[i];\n        // start value\n        var v = le[cd[i] - 1]++ << r_1;\n        // m is end value\n        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {\n          // every 16 bit value starting with the code yields the same result\n          co[rev[v] >>> rvb] = sv;\n        }\n      }\n    }\n  } else {\n    co = new u16(s);\n    for (i = 0; i < s; ++i) co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];\n  }\n  return co;\n};\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i) flt[i] = 8;\nfor (var i = 144; i < 256; ++i) flt[i] = 9;\nfor (var i = 256; i < 280; ++i) flt[i] = 7;\nfor (var i = 280; i < 288; ++i) flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i) fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/hMap(flt, 9, 0),\n  flrm = /*#__PURE__*/hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/hMap(fdt, 5, 0),\n  fdrm = /*#__PURE__*/hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n  var m = a[0];\n  for (var i = 1; i < a.length; ++i) {\n    if (a[i] > m) m = a[i];\n  }\n  return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n  var o = p / 8 >> 0;\n  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n  var o = p / 8 >> 0;\n  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);\n};\n// get end of byte\nvar shft = function (p) {\n  return (p / 8 >> 0) + (p & 7 && 1);\n};\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n  if (s == null || s < 0) s = 0;\n  if (e == null || e > v.length) e = v.length;\n  // can't use .constructor in case user-supplied\n  var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);\n  n.set(v.subarray(s, e));\n  return n;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n  // source length\n  var sl = dat.length;\n  // have to estimate size\n  var noBuf = !buf || st;\n  // no state\n  var noSt = !st || st.i;\n  if (!st) st = {};\n  // Assumes roughly 33% compression ratio average\n  if (!buf) buf = new u8(sl * 3);\n  // ensure buffer can fit at least l elements\n  var cbuf = function (l) {\n    var bl = buf.length;\n    // need to increase size to fit\n    if (l > bl) {\n      // Double or set to necessary, whichever is greater\n      var nbuf = new u8(Math.max(bl * 2, l));\n      nbuf.set(buf);\n      buf = nbuf;\n    }\n  };\n  //  last chunk         bitpos           bytes\n  var final = st.f || 0,\n    pos = st.p || 0,\n    bt = st.b || 0,\n    lm = st.l,\n    dm = st.d,\n    lbt = st.m,\n    dbt = st.n;\n  // total bits\n  var tbts = sl * 8;\n  do {\n    if (!lm) {\n      // BFINAL - this is only 1 when last chunk is next\n      st.f = final = bits(dat, pos, 1);\n      // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n      var type = bits(dat, pos + 1, 3);\n      pos += 3;\n      if (!type) {\n        // go to end of byte boundary\n        var s = shft(pos) + 4,\n          l = dat[s - 4] | dat[s - 3] << 8,\n          t = s + l;\n        if (t > sl) {\n          if (noSt) throw 'unexpected EOF';\n          break;\n        }\n        // ensure size\n        if (noBuf) cbuf(bt + l);\n        // Copy over uncompressed data\n        buf.set(dat.subarray(s, t), bt);\n        // Get new bitpos, update byte count\n        st.b = bt += l, st.p = pos = t * 8;\n        continue;\n      } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;else if (type == 2) {\n        //  literal                            lengths\n        var hLit = bits(dat, pos, 31) + 257,\n          hcLen = bits(dat, pos + 10, 15) + 4;\n        var tl = hLit + bits(dat, pos + 5, 31) + 1;\n        pos += 14;\n        // length+distance tree\n        var ldt = new u8(tl);\n        // code length tree\n        var clt = new u8(19);\n        for (var i = 0; i < hcLen; ++i) {\n          // use index map to get real code\n          clt[clim[i]] = bits(dat, pos + i * 3, 7);\n        }\n        pos += hcLen * 3;\n        // code lengths bits\n        var clb = max(clt),\n          clbmsk = (1 << clb) - 1;\n        if (!noSt && pos + tl * (clb + 7) > tbts) break;\n        // code lengths map\n        var clm = hMap(clt, clb, 1);\n        for (var i = 0; i < tl;) {\n          var r = clm[bits(dat, pos, clbmsk)];\n          // bits read\n          pos += r & 15;\n          // symbol\n          var s = r >>> 4;\n          // code length to copy\n          if (s < 16) {\n            ldt[i++] = s;\n          } else {\n            //  copy   count\n            var c = 0,\n              n = 0;\n            if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;\n            while (n--) ldt[i++] = c;\n          }\n        }\n        //    length tree                 distance tree\n        var lt = ldt.subarray(0, hLit),\n          dt = ldt.subarray(hLit);\n        // max length bits\n        lbt = max(lt);\n        // max dist bits\n        dbt = max(dt);\n        lm = hMap(lt, lbt, 1);\n        dm = hMap(dt, dbt, 1);\n      } else throw 'invalid block type';\n      if (pos > tbts) throw 'unexpected EOF';\n    }\n    // Make sure the buffer can hold this + the largest possible addition\n    // Maximum chunk size (practically, theoretically infinite) is 2^17;\n    if (noBuf) cbuf(bt + 131072);\n    var lms = (1 << lbt) - 1,\n      dms = (1 << dbt) - 1;\n    var mxa = lbt + dbt + 18;\n    while (noSt || pos + mxa < tbts) {\n      // bits read, code\n      var c = lm[bits16(dat, pos) & lms],\n        sym = c >>> 4;\n      pos += c & 15;\n      if (pos > tbts) throw 'unexpected EOF';\n      if (!c) throw 'invalid length/literal';\n      if (sym < 256) buf[bt++] = sym;else if (sym == 256) {\n        lm = null;\n        break;\n      } else {\n        var add = sym - 254;\n        // no extra bits needed if less\n        if (sym > 264) {\n          // index\n          var i = sym - 257,\n            b = fleb[i];\n          add = bits(dat, pos, (1 << b) - 1) + fl[i];\n          pos += b;\n        }\n        // dist\n        var d = dm[bits16(dat, pos) & dms],\n          dsym = d >>> 4;\n        if (!d) throw 'invalid distance';\n        pos += d & 15;\n        var dt = fd[dsym];\n        if (dsym > 3) {\n          var b = fdeb[dsym];\n          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n        }\n        if (pos > tbts) throw 'unexpected EOF';\n        if (noBuf) cbuf(bt + 131072);\n        var end = bt + add;\n        for (; bt < end; bt += 4) {\n          buf[bt] = buf[bt - dt];\n          buf[bt + 1] = buf[bt + 1 - dt];\n          buf[bt + 2] = buf[bt + 2 - dt];\n          buf[bt + 3] = buf[bt + 3 - dt];\n        }\n        bt = end;\n      }\n    }\n    st.l = lm, st.p = pos, st.b = bt;\n    if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n  } while (!final);\n  return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n  v <<= p & 7;\n  var o = p / 8 >> 0;\n  d[o] |= v;\n  d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n  v <<= p & 7;\n  var o = p / 8 >> 0;\n  d[o] |= v;\n  d[o + 1] |= v >>> 8;\n  d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n  // Need extra info to make a tree\n  var t = [];\n  for (var i = 0; i < d.length; ++i) {\n    if (d[i]) t.push({\n      s: i,\n      f: d[i]\n    });\n  }\n  var s = t.length;\n  var t2 = t.slice();\n  if (!s) return [new u8(0), 0];\n  if (s == 1) {\n    var v = new u8(t[0].s + 1);\n    v[t[0].s] = 1;\n    return [v, 1];\n  }\n  t.sort(function (a, b) {\n    return a.f - b.f;\n  });\n  // after i2 reaches last ind, will be stopped\n  // freq must be greater than largest possible number of symbols\n  t.push({\n    s: -1,\n    f: 25001\n  });\n  var l = t[0],\n    r = t[1],\n    i0 = 0,\n    i1 = 1,\n    i2 = 2;\n  t[0] = {\n    s: -1,\n    f: l.f + r.f,\n    l: l,\n    r: r\n  };\n  // efficient algorithm from UZIP.js\n  // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n  // symbols that combined have high freq, will start processing i2 (high-freq,\n  // non-composite) symbols instead\n  // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n  while (i1 != s - 1) {\n    l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n    t[i1++] = {\n      s: -1,\n      f: l.f + r.f,\n      l: l,\n      r: r\n    };\n  }\n  var maxSym = t2[0].s;\n  for (var i = 1; i < s; ++i) {\n    if (t2[i].s > maxSym) maxSym = t2[i].s;\n  }\n  // code lengths\n  var tr = new u16(maxSym + 1);\n  // max bits in tree\n  var mbt = ln(t[i1 - 1], tr, 0);\n  if (mbt > mb) {\n    // more algorithms from UZIP.js\n    // TODO: find out how this code works (debt)\n    //  ind    debt\n    var i = 0,\n      dt = 0;\n    //    left            cost\n    var lft = mbt - mb,\n      cst = 1 << lft;\n    t2.sort(function (a, b) {\n      return tr[b.s] - tr[a.s] || a.f - b.f;\n    });\n    for (; i < s; ++i) {\n      var i2_1 = t2[i].s;\n      if (tr[i2_1] > mb) {\n        dt += cst - (1 << mbt - tr[i2_1]);\n        tr[i2_1] = mb;\n      } else break;\n    }\n    dt >>>= lft;\n    while (dt > 0) {\n      var i2_2 = t2[i].s;\n      if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;else ++i;\n    }\n    for (; i >= 0 && dt; --i) {\n      var i2_3 = t2[i].s;\n      if (tr[i2_3] == mb) {\n        --tr[i2_3];\n        ++dt;\n      }\n    }\n    mbt = mb;\n  }\n  return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;\n};\n// length codes generation\nvar lc = function (c) {\n  var s = c.length;\n  // Note that the semicolon was intentional\n  while (s && !c[--s]);\n  var cl = new u16(++s);\n  //  ind      num         streak\n  var cli = 0,\n    cln = c[0],\n    cls = 1;\n  var w = function (v) {\n    cl[cli++] = v;\n  };\n  for (var i = 1; i <= s; ++i) {\n    if (c[i] == cln && i != s) ++cls;else {\n      if (!cln && cls > 2) {\n        for (; cls > 138; cls -= 138) w(32754);\n        if (cls > 2) {\n          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);\n          cls = 0;\n        }\n      } else if (cls > 3) {\n        w(cln), --cls;\n        for (; cls > 6; cls -= 6) w(8304);\n        if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;\n      }\n      while (cls--) w(cln);\n      cls = 1;\n      cln = c[i];\n    }\n  }\n  return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n  var l = 0;\n  for (var i = 0; i < cl.length; ++i) l += cf[i] * cl[i];\n  return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n  // no need to write 00 as type: TypedArray defaults to 0\n  var s = dat.length;\n  var o = shft(pos + 2);\n  out[o] = s & 255;\n  out[o + 1] = s >>> 8;\n  out[o + 2] = out[o] ^ 255;\n  out[o + 3] = out[o + 1] ^ 255;\n  for (var i = 0; i < s; ++i) out[o + i + 4] = dat[i];\n  return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n  wbits(out, p++, final);\n  ++lf[256];\n  var _a = hTree(lf, 15),\n    dlt = _a[0],\n    mlb = _a[1];\n  var _b = hTree(df, 15),\n    ddt = _b[0],\n    mdb = _b[1];\n  var _c = lc(dlt),\n    lclt = _c[0],\n    nlc = _c[1];\n  var _d = lc(ddt),\n    lcdt = _d[0],\n    ndc = _d[1];\n  var lcfreq = new u16(19);\n  for (var i = 0; i < lclt.length; ++i) lcfreq[lclt[i] & 31]++;\n  for (var i = 0; i < lcdt.length; ++i) lcfreq[lcdt[i] & 31]++;\n  var _e = hTree(lcfreq, 7),\n    lct = _e[0],\n    mlcb = _e[1];\n  var nlcc = 19;\n  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc);\n  var flen = bl + 5 << 3;\n  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n  if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));\n  var lm, ll, dm, dl;\n  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n  if (dtlen < ftlen) {\n    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n    var llm = hMap(lct, mlcb, 0);\n    wbits(out, p, nlc - 257);\n    wbits(out, p + 5, ndc - 1);\n    wbits(out, p + 10, nlcc - 4);\n    p += 14;\n    for (var i = 0; i < nlcc; ++i) wbits(out, p + 3 * i, lct[clim[i]]);\n    p += 3 * nlcc;\n    var lcts = [lclt, lcdt];\n    for (var it = 0; it < 2; ++it) {\n      var clct = lcts[it];\n      for (var i = 0; i < clct.length; ++i) {\n        var len = clct[i] & 31;\n        wbits(out, p, llm[len]), p += lct[len];\n        if (len > 15) wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;\n      }\n    }\n  } else {\n    lm = flm, ll = flt, dm = fdm, dl = fdt;\n  }\n  for (var i = 0; i < li; ++i) {\n    if (syms[i] > 255) {\n      var len = syms[i] >>> 18 & 31;\n      wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n      if (len > 7) wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];\n      var dst = syms[i] & 31;\n      wbits16(out, p, dm[dst]), p += dl[dst];\n      if (dst > 3) wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];\n    } else {\n      wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n    }\n  }\n  wbits16(out, p, lm[256]);\n  return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n  var s = dat.length;\n  var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post);\n  // writing to this writes to the output buffer\n  var w = o.subarray(pre, o.length - post);\n  var pos = 0;\n  if (!lvl || s < 8) {\n    for (var i = 0; i <= s; i += 65535) {\n      // end\n      var e = i + 65535;\n      if (e < s) {\n        // write full block\n        pos = wfblk(w, pos, dat.subarray(i, e));\n      } else {\n        // write final block\n        w[i] = lst;\n        pos = wfblk(w, pos, dat.subarray(i, s));\n      }\n    }\n  } else {\n    var opt = deo[lvl - 1];\n    var n = opt >>> 13,\n      c = opt & 8191;\n    var msk_1 = (1 << plvl) - 1;\n    //    prev 2-byte val map    curr 2-byte val map\n    var prev = new u16(32768),\n      head = new u16(msk_1 + 1);\n    var bs1_1 = Math.ceil(plvl / 3),\n      bs2_1 = 2 * bs1_1;\n    var hsh = function (i) {\n      return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;\n    };\n    // 24576 is an arbitrary number of maximum symbols per block\n    // 424 buffer for last block\n    var syms = new u32(25000);\n    // length/literal freq   distance freq\n    var lf = new u16(288),\n      df = new u16(32);\n    //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n    var lc_1 = 0,\n      eb = 0,\n      i = 0,\n      li = 0,\n      wi = 0,\n      bs = 0;\n    for (; i < s; ++i) {\n      // hash value\n      var hv = hsh(i);\n      // index mod 32768\n      var imod = i & 32767;\n      // previous index with this value\n      var pimod = head[hv];\n      prev[imod] = pimod;\n      head[hv] = imod;\n      // We always should modify head and prev, but only add symbols if\n      // this data is not yet processed (\"wait\" for wait index)\n      if (wi <= i) {\n        // bytes remaining\n        var rem = s - i;\n        if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n          li = lc_1 = eb = 0, bs = i;\n          for (var j = 0; j < 286; ++j) lf[j] = 0;\n          for (var j = 0; j < 30; ++j) df[j] = 0;\n        }\n        //  len    dist   chain\n        var l = 2,\n          d = 0,\n          ch_1 = c,\n          dif = imod - pimod & 32767;\n        if (rem > 2 && hv == hsh(i - dif)) {\n          var maxn = Math.min(n, rem) - 1;\n          var maxd = Math.min(32767, i);\n          // max possible length\n          // not capped at dif because decompressors implement \"rolling\" index population\n          var ml = Math.min(258, rem);\n          while (dif <= maxd && --ch_1 && imod != pimod) {\n            if (dat[i + l] == dat[i + l - dif]) {\n              var nl = 0;\n              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl);\n              if (nl > l) {\n                l = nl, d = dif;\n                // break out early when we reach \"nice\" (we are satisfied enough)\n                if (nl > maxn) break;\n                // now, find the rarest 2-byte sequence within this\n                // length of literals and search for that instead.\n                // Much faster than just using the start\n                var mmd = Math.min(dif, nl - 2);\n                var md = 0;\n                for (var j = 0; j < mmd; ++j) {\n                  var ti = i - dif + j + 32768 & 32767;\n                  var pti = prev[ti];\n                  var cd = ti - pti + 32768 & 32767;\n                  if (cd > md) md = cd, pimod = ti;\n                }\n              }\n            }\n            // check the previous match\n            imod = pimod, pimod = prev[imod];\n            dif += imod - pimod + 32768 & 32767;\n          }\n        }\n        // d will be nonzero only when a match was found\n        if (d) {\n          // store both dist and len data in one Uint32\n          // Make sure this is recognized as a len/dist with 28th bit (2^28)\n          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];\n          var lin = revfl[l] & 31,\n            din = revfd[d] & 31;\n          eb += fleb[lin] + fdeb[din];\n          ++lf[257 + lin];\n          ++df[din];\n          wi = i + l;\n          ++lc_1;\n        } else {\n          syms[li++] = dat[i];\n          ++lf[dat[i]];\n        }\n      }\n    }\n    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n    // this is the easiest way to avoid needing to maintain state\n    if (!lst) pos = wfblk(w, pos, et);\n  }\n  return slc(o, 0, pre + shft(pos) + post);\n};\n// Alder32\nvar adler = function () {\n  var a = 1,\n    b = 0;\n  return {\n    p: function (d) {\n      // closures have awful performance\n      var n = a,\n        m = b;\n      var l = d.length;\n      for (var i = 0; i != l;) {\n        var e = Math.min(i + 5552, l);\n        for (; i < e; ++i) n += d[i], m += n;\n        n %= 65521, m %= 65521;\n      }\n      a = n, b = m;\n    },\n    d: function () {\n      return (a >>> 8 << 16 | (b & 255) << 8 | b >>> 8) + ((a & 255) << 23) * 2;\n    }\n  };\n};\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);\n};\n// write bytes\nvar wbytes = function (d, b, v) {\n  for (; v; ++b) d[b] = v, v >>>= 8;\n};\n// zlib header\nvar zlh = function (c, o) {\n  var lv = o.level,\n    fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n  c[0] = 120, c[1] = fl << 6 | (fl ? 32 - 2 * fl : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';\n  if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';\n};\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var a = adler();\n  a.p(data);\n  var d = dopt(data, opts, 2, 4);\n  return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, out) {\n  return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n  var l = str.length;\n  if (!latin1 && typeof TextEncoder != 'undefined') return new TextEncoder().encode(str);\n  var ar = new u8(str.length + (str.length >>> 1));\n  var ai = 0;\n  var w = function (v) {\n    ar[ai++] = v;\n  };\n  for (var i = 0; i < l; ++i) {\n    if (ai + 5 > ar.length) {\n      var n = new u8(ai + 8 + (l - i << 1));\n      n.set(ar);\n      ar = n;\n    }\n    var c = str.charCodeAt(i);\n    if (c < 128 || latin1) w(c);else if (c < 2048) w(192 | c >>> 6), w(128 | c & 63);else if (c > 55295 && c < 57344) c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >>> 18), w(128 | c >>> 12 & 63), w(128 | c >>> 6 & 63), w(128 | c & 63);else w(224 | c >>> 12), w(128 | c >>> 6 & 63), w(128 | c & 63);\n  }\n  return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n  var r = '';\n  if (!latin1 && typeof TextDecoder != 'undefined') return new TextDecoder().decode(dat);\n  for (var i = 0; i < dat.length;) {\n    var c = dat[i++];\n    if (c < 128 || latin1) r += String.fromCharCode(c);else if (c < 224) r += String.fromCharCode((c & 31) << 6 | dat[i++] & 63);else if (c < 240) r += String.fromCharCode((c & 15) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63);else c = ((c & 15) << 18 | (dat[i++] & 63) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);\n  }\n  return r;\n}\nexport { strFromU8, strToU8, unzlibSync, zlibSync };","map":{"version":3,"names":["u8","Uint8Array","u16","Uint16Array","u32","Uint32Array","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","_b","fd","revfd","rev","x","hMap","cd","mb","s","length","l","le","co","rvb","sv","r_1","v","m","flt","fdt","flm","flrm","fdm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","e","n","set","subarray","inflt","dat","buf","st","sl","noBuf","noSt","cbuf","bl","nbuf","Math","final","f","pos","bt","lm","dm","lbt","dbt","tbts","type","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","lt","dt","lms","dms","mxa","sym","add","dsym","end","wbits","wbits16","hTree","push","t2","slice","sort","i0","i1","i2","maxSym","tr","mbt","ln","lft","cst","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","w","clen","cf","wfblk","out","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","flen","ftlen","dtlen","ll","dl","llm","lcts","it","clct","len","dst","deo","et","dflt","lvl","plvl","pre","post","lst","floor","opt","msk_1","prev","head","bs1_1","ceil","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","min","maxd","ml","nl","mmd","md","ti","pti","lin","din","adler","dopt","level","mem","log","wbytes","zlh","lv","zlv","zlibSync","data","opts","unzlibSync","strToU8","str","latin1","TextEncoder","encode","ar","ai","charCodeAt","strFromU8","TextDecoder","decode","String","fromCharCode"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/ext/fflate/esm/browser.js"],"sourcesContent":["// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i)\n        ++l[cd[i] - 1];\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i)\n            co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) >> 0;\n    return ((d[o] | (d[o + 1] << 8)) >>> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) >> 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >>> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p / 8) >> 0) + (p & 7 && 1); };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            st.f = final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        throw 'unexpected EOF';\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                if (!noSt && pos + tl * (clb + 7) > tbts)\n                    break;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                throw 'invalid block type';\n            if (pos > tbts)\n                throw 'unexpected EOF';\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var mxa = lbt + dbt + 18;\n        while (noSt || pos + mxa < tbts) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts)\n                throw 'unexpected EOF';\n            if (!c)\n                throw 'invalid length/literal';\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    throw 'invalid distance';\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts)\n                    throw 'unexpected EOF';\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = pos, st.b = bt;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) >> 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) >> 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [new u8(0), 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e < s) {\n                // write full block\n                pos = wfblk(w, pos, dat.subarray(i, e));\n            }\n            else {\n                // write final block\n                w[i] = lst;\n                pos = wfblk(w, pos, dat.subarray(i, s));\n            }\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768\n            var imod = i & 32767;\n            // previous index with this value\n            var pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst)\n            pos = wfblk(w, pos, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 5552, l);\n                for (; i < e; ++i)\n                    n += d[i], m += n;\n                n %= 65521, m %= 65521;\n            }\n            a = n, b = m;\n        },\n        d: function () { return ((a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8)) + ((a & 255) << 23) * 2; }\n    };\n};\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        throw 'invalid zlib data';\n    if (d[1] & 32)\n        throw 'invalid zlib data: preset dictionaries not supported';\n};\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (opts === void 0) { opts = {}; }\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    var l = str.length;\n    if (!latin1 && typeof TextEncoder != 'undefined')\n        return new TextEncoder().encode(str);\n    var ar = new u8(str.length + (str.length >>> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >>> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >>> 18)), w(128 | ((c >>> 12) & 63)), w(128 | ((c >>> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >>> 12)), w(128 | ((c >>> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    var r = '';\n    if (!latin1 && typeof TextDecoder != 'undefined')\n        return new TextDecoder().decode(dat);\n    for (var i = 0; i < dat.length;) {\n        var c = dat[i++];\n        if (c < 128 || latin1)\n            r += String.fromCharCode(c);\n        else if (c < 224)\n            r += String.fromCharCode((c & 31) << 6 | (dat[i++] & 63));\n        else if (c < 240)\n            r += String.fromCharCode((c & 15) << 12 | (dat[i++] & 63) << 6 | (dat[i++] & 63));\n        else\n            c = ((c & 15) << 18 | (dat[i++] & 63) << 12 | (dat[i++] & 63) << 6 | (dat[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n    }\n    return r;\n}\n\nexport { strFromU8, strToU8, unzlibSync, zlibSync };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}