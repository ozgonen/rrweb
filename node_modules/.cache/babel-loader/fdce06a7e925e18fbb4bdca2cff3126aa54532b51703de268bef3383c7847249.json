{"ast":null,"code":"import { patch } from '../../../utils.js';\nimport { ErrorStackParser } from './error-stack-parser.js';\nimport { stringify } from './stringify.js';\nconst defaultLogOptions = {\n  level: ['assert', 'clear', 'count', 'countReset', 'debug', 'dir', 'dirxml', 'error', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'table', 'time', 'timeEnd', 'timeLog', 'trace', 'warn'],\n  lengthThreshold: 1000,\n  logger: 'console'\n};\nfunction initLogObserver(cb, win, options) {\n  const logOptions = options ? Object.assign({}, defaultLogOptions, options) : defaultLogOptions;\n  const loggerType = logOptions.logger;\n  if (!loggerType) {\n    return () => {};\n  }\n  let logger;\n  if (typeof loggerType === 'string') {\n    logger = win[loggerType];\n  } else {\n    logger = loggerType;\n  }\n  let logCount = 0;\n  const cancelHandlers = [];\n  if (logOptions.level.includes('error')) {\n    if (window) {\n      const errorHandler = event => {\n        const message = event.message,\n          error = event.error;\n        const trace = ErrorStackParser.parse(error).map(stackFrame => stackFrame.toString());\n        const payload = [stringify(message, logOptions.stringifyOptions)];\n        cb({\n          level: 'error',\n          trace,\n          payload\n        });\n      };\n      window.addEventListener('error', errorHandler);\n      cancelHandlers.push(() => {\n        if (window) window.removeEventListener('error', errorHandler);\n      });\n    }\n  }\n  for (const levelType of logOptions.level) {\n    cancelHandlers.push(replace(logger, levelType));\n  }\n  return () => {\n    cancelHandlers.forEach(h => h());\n  };\n  function replace(_logger, level) {\n    if (!_logger[level]) {\n      return () => {};\n    }\n    return patch(_logger, level, original => {\n      return (...args) => {\n        original.apply(this, args);\n        try {\n          const trace = ErrorStackParser.parse(new Error()).map(stackFrame => stackFrame.toString()).splice(1);\n          const payload = args.map(s => stringify(s, logOptions.stringifyOptions));\n          logCount++;\n          if (logCount < logOptions.lengthThreshold) {\n            cb({\n              level,\n              trace,\n              payload\n            });\n          } else if (logCount === logOptions.lengthThreshold) {\n            cb({\n              level: 'warn',\n              trace: [],\n              payload: [stringify('The number of log records reached the threshold.')]\n            });\n          }\n        } catch (error) {\n          original('rrweb logger error:', error, ...args);\n        }\n      };\n    });\n  }\n}\nconst PLUGIN_NAME = 'rrweb/console@1';\nconst getRecordConsolePlugin = options => ({\n  name: PLUGIN_NAME,\n  observer: initLogObserver,\n  options: options\n});\nexport { PLUGIN_NAME, getRecordConsolePlugin };","map":{"version":3,"names":["patch","ErrorStackParser","stringify","defaultLogOptions","level","lengthThreshold","logger","initLogObserver","cb","win","options","logOptions","Object","assign","loggerType","logCount","cancelHandlers","includes","window","errorHandler","event","message","error","trace","parse","map","stackFrame","toString","payload","stringifyOptions","addEventListener","push","removeEventListener","levelType","replace","forEach","h","_logger","original","args","apply","Error","splice","s","PLUGIN_NAME","getRecordConsolePlugin","name","observer"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrweb/src/plugins/console/record/index.js"],"sourcesContent":["import { patch } from '../../../utils.js';\nimport { ErrorStackParser } from './error-stack-parser.js';\nimport { stringify } from './stringify.js';\n\nconst defaultLogOptions = {\r\n    level: [\r\n        'assert',\r\n        'clear',\r\n        'count',\r\n        'countReset',\r\n        'debug',\r\n        'dir',\r\n        'dirxml',\r\n        'error',\r\n        'group',\r\n        'groupCollapsed',\r\n        'groupEnd',\r\n        'info',\r\n        'log',\r\n        'table',\r\n        'time',\r\n        'timeEnd',\r\n        'timeLog',\r\n        'trace',\r\n        'warn',\r\n    ],\r\n    lengthThreshold: 1000,\r\n    logger: 'console',\r\n};\r\nfunction initLogObserver(cb, win, options) {\r\n    const logOptions = (options\r\n        ? Object.assign({}, defaultLogOptions, options)\r\n        : defaultLogOptions);\r\n    const loggerType = logOptions.logger;\r\n    if (!loggerType) {\r\n        return () => {\r\n        };\r\n    }\r\n    let logger;\r\n    if (typeof loggerType === 'string') {\r\n        logger = win[loggerType];\r\n    }\r\n    else {\r\n        logger = loggerType;\r\n    }\r\n    let logCount = 0;\r\n    const cancelHandlers = [];\r\n    if (logOptions.level.includes('error')) {\r\n        if (window) {\r\n            const errorHandler = (event) => {\r\n                const message = event.message, error = event.error;\r\n                const trace = ErrorStackParser.parse(error).map((stackFrame) => stackFrame.toString());\r\n                const payload = [stringify(message, logOptions.stringifyOptions)];\r\n                cb({\r\n                    level: 'error',\r\n                    trace,\r\n                    payload,\r\n                });\r\n            };\r\n            window.addEventListener('error', errorHandler);\r\n            cancelHandlers.push(() => {\r\n                if (window)\r\n                    window.removeEventListener('error', errorHandler);\r\n            });\r\n        }\r\n    }\r\n    for (const levelType of logOptions.level) {\r\n        cancelHandlers.push(replace(logger, levelType));\r\n    }\r\n    return () => {\r\n        cancelHandlers.forEach((h) => h());\r\n    };\r\n    function replace(_logger, level) {\r\n        if (!_logger[level]) {\r\n            return () => {\r\n            };\r\n        }\r\n        return patch(_logger, level, (original) => {\r\n            return (...args) => {\r\n                original.apply(this, args);\r\n                try {\r\n                    const trace = ErrorStackParser.parse(new Error())\r\n                        .map((stackFrame) => stackFrame.toString())\r\n                        .splice(1);\r\n                    const payload = args.map((s) => stringify(s, logOptions.stringifyOptions));\r\n                    logCount++;\r\n                    if (logCount < logOptions.lengthThreshold) {\r\n                        cb({\r\n                            level,\r\n                            trace,\r\n                            payload,\r\n                        });\r\n                    }\r\n                    else if (logCount === logOptions.lengthThreshold) {\r\n                        cb({\r\n                            level: 'warn',\r\n                            trace: [],\r\n                            payload: [\r\n                                stringify('The number of log records reached the threshold.'),\r\n                            ],\r\n                        });\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    original('rrweb logger error:', error, ...args);\r\n                }\r\n            };\r\n        });\r\n    }\r\n}\r\nconst PLUGIN_NAME = 'rrweb/console@1';\r\nconst getRecordConsolePlugin = (options) => ({\r\n    name: PLUGIN_NAME,\r\n    observer: initLogObserver,\r\n    options: options,\r\n});\n\nexport { PLUGIN_NAME, getRecordConsolePlugin };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}