{"ast":null,"code":"import { PLUGIN_NAME } from '../record/index.js';\nimport { EventType, IncrementalSource } from '../../../../../types/dist/types.js';\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nconst defaultLogConfig = {\n  level: ['assert', 'clear', 'count', 'countReset', 'debug', 'dir', 'dirxml', 'error', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'table', 'time', 'timeEnd', 'timeLog', 'trace', 'warn'],\n  replayLogger: undefined\n};\nclass LogReplayPlugin {\n  constructor(config) {\n    this.config = Object.assign(defaultLogConfig, config);\n  }\n  getConsoleLogger() {\n    const replayLogger = {};\n    for (const level of this.config.level) {\n      if (level === 'trace') {\n        replayLogger[level] = data => {\n          const logger = console.log[ORIGINAL_ATTRIBUTE_NAME] ? console.log[ORIGINAL_ATTRIBUTE_NAME] : console.log;\n          logger(...data.payload.map(s => JSON.parse(s)), this.formatMessage(data));\n        };\n      } else {\n        replayLogger[level] = data => {\n          const logger = console[level][ORIGINAL_ATTRIBUTE_NAME] ? console[level][ORIGINAL_ATTRIBUTE_NAME] : console[level];\n          logger(...data.payload.map(s => JSON.parse(s)), this.formatMessage(data));\n        };\n      }\n    }\n    return replayLogger;\n  }\n  formatMessage(data) {\n    if (data.trace.length === 0) {\n      return '';\n    }\n    const stackPrefix = '\\n\\tat ';\n    let result = stackPrefix;\n    result += data.trace.join(stackPrefix);\n    return result;\n  }\n}\nconst getReplayConsolePlugin = options => {\n  const replayLogger = (options === null || options === void 0 ? void 0 : options.replayLogger) || new LogReplayPlugin(options).getConsoleLogger();\n  return {\n    handler(event, _isSync, context) {\n      let logData = null;\n      if (event.type === EventType.IncrementalSnapshot && event.data.source === IncrementalSource.Log) {\n        logData = event.data;\n      } else if (event.type === EventType.Plugin && event.data.plugin === PLUGIN_NAME) {\n        logData = event.data.payload;\n      }\n      if (logData) {\n        try {\n          if (typeof replayLogger[logData.level] === 'function') {\n            replayLogger[logData.level](logData);\n          }\n        } catch (error) {\n          if (context.replayer.config.showWarning) {\n            console.warn(error);\n          }\n        }\n      }\n    }\n  };\n};\nexport { getReplayConsolePlugin };","map":{"version":3,"names":["PLUGIN_NAME","EventType","IncrementalSource","ORIGINAL_ATTRIBUTE_NAME","defaultLogConfig","level","replayLogger","undefined","LogReplayPlugin","constructor","config","Object","assign","getConsoleLogger","data","logger","console","log","payload","map","s","JSON","parse","formatMessage","trace","length","stackPrefix","result","join","getReplayConsolePlugin","options","handler","event","_isSync","context","logData","type","IncrementalSnapshot","source","Log","Plugin","plugin","error","replayer","showWarning","warn"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrweb/src/plugins/console/replay/index.js"],"sourcesContent":["import { PLUGIN_NAME } from '../record/index.js';\nimport { EventType, IncrementalSource } from '../../../../../types/dist/types.js';\n\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\r\nconst defaultLogConfig = {\r\n    level: [\r\n        'assert',\r\n        'clear',\r\n        'count',\r\n        'countReset',\r\n        'debug',\r\n        'dir',\r\n        'dirxml',\r\n        'error',\r\n        'group',\r\n        'groupCollapsed',\r\n        'groupEnd',\r\n        'info',\r\n        'log',\r\n        'table',\r\n        'time',\r\n        'timeEnd',\r\n        'timeLog',\r\n        'trace',\r\n        'warn',\r\n    ],\r\n    replayLogger: undefined,\r\n};\r\nclass LogReplayPlugin {\r\n    constructor(config) {\r\n        this.config = Object.assign(defaultLogConfig, config);\r\n    }\r\n    getConsoleLogger() {\r\n        const replayLogger = {};\r\n        for (const level of this.config.level) {\r\n            if (level === 'trace') {\r\n                replayLogger[level] = (data) => {\r\n                    const logger = console.log[ORIGINAL_ATTRIBUTE_NAME]\r\n                        ? console.log[ORIGINAL_ATTRIBUTE_NAME]\r\n                        : console.log;\r\n                    logger(...data.payload.map((s) => JSON.parse(s)), this.formatMessage(data));\r\n                };\r\n            }\r\n            else {\r\n                replayLogger[level] = (data) => {\r\n                    const logger = console[level][ORIGINAL_ATTRIBUTE_NAME]\r\n                        ? console[level][ORIGINAL_ATTRIBUTE_NAME]\r\n                        : console[level];\r\n                    logger(...data.payload.map((s) => JSON.parse(s)), this.formatMessage(data));\r\n                };\r\n            }\r\n        }\r\n        return replayLogger;\r\n    }\r\n    formatMessage(data) {\r\n        if (data.trace.length === 0) {\r\n            return '';\r\n        }\r\n        const stackPrefix = '\\n\\tat ';\r\n        let result = stackPrefix;\r\n        result += data.trace.join(stackPrefix);\r\n        return result;\r\n    }\r\n}\r\nconst getReplayConsolePlugin = (options) => {\r\n    const replayLogger = (options === null || options === void 0 ? void 0 : options.replayLogger) || new LogReplayPlugin(options).getConsoleLogger();\r\n    return {\r\n        handler(event, _isSync, context) {\r\n            let logData = null;\r\n            if (event.type === EventType.IncrementalSnapshot &&\r\n                event.data.source === IncrementalSource.Log) {\r\n                logData = event.data;\r\n            }\r\n            else if (event.type === EventType.Plugin &&\r\n                event.data.plugin === PLUGIN_NAME) {\r\n                logData = event.data.payload;\r\n            }\r\n            if (logData) {\r\n                try {\r\n                    if (typeof replayLogger[logData.level] === 'function') {\r\n                        replayLogger[logData.level](logData);\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    if (context.replayer.config.showWarning) {\r\n                        console.warn(error);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    };\r\n};\n\nexport { getReplayConsolePlugin };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}