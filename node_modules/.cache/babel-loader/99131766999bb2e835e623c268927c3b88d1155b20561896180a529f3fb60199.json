{"ast":null,"code":"import { CanvasContext } from '../../../../../types/dist/types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\nimport { serializeArgs } from './serialize-args.js';\nfunction initCanvas2DMutationObserver(cb, win, blockClass, blockSelector) {\n  const handlers = [];\n  const props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);\n  for (const prop of props2D) {\n    try {\n      if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {\n        continue;\n      }\n      const restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {\n        return function (...args) {\n          if (!isBlocked(this.canvas, blockClass, blockSelector, true)) {\n            setTimeout(() => {\n              const recordArgs = serializeArgs([...args], win, this);\n              cb(this.canvas, {\n                type: CanvasContext['2D'],\n                property: prop,\n                args: recordArgs\n              });\n            }, 0);\n          }\n          return original.apply(this, args);\n        };\n      });\n      handlers.push(restoreHandler);\n    } catch (_a) {\n      const hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {\n        set(v) {\n          cb(this.canvas, {\n            type: CanvasContext['2D'],\n            property: prop,\n            args: [v],\n            setter: true\n          });\n        }\n      });\n      handlers.push(hookHandler);\n    }\n  }\n  return () => {\n    handlers.forEach(h => h());\n  };\n}\nexport { initCanvas2DMutationObserver as default };","map":{"version":3,"names":["CanvasContext","patch","isBlocked","hookSetter","serializeArgs","initCanvas2DMutationObserver","cb","win","blockClass","blockSelector","handlers","props2D","Object","getOwnPropertyNames","CanvasRenderingContext2D","prototype","prop","restoreHandler","original","args","canvas","setTimeout","recordArgs","type","property","apply","push","_a","hookHandler","set","v","setter","forEach","h","default"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/2d.js"],"sourcesContent":["import { CanvasContext } from '../../../../../types/dist/types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\nimport { serializeArgs } from './serialize-args.js';\n\nfunction initCanvas2DMutationObserver(cb, win, blockClass, blockSelector) {\r\n    const handlers = [];\r\n    const props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);\r\n    for (const prop of props2D) {\r\n        try {\r\n            if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {\r\n                continue;\r\n            }\r\n            const restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {\r\n                return function (...args) {\r\n                    if (!isBlocked(this.canvas, blockClass, blockSelector, true)) {\r\n                        setTimeout(() => {\r\n                            const recordArgs = serializeArgs([...args], win, this);\r\n                            cb(this.canvas, {\r\n                                type: CanvasContext['2D'],\r\n                                property: prop,\r\n                                args: recordArgs,\r\n                            });\r\n                        }, 0);\r\n                    }\r\n                    return original.apply(this, args);\r\n                };\r\n            });\r\n            handlers.push(restoreHandler);\r\n        }\r\n        catch (_a) {\r\n            const hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {\r\n                set(v) {\r\n                    cb(this.canvas, {\r\n                        type: CanvasContext['2D'],\r\n                        property: prop,\r\n                        args: [v],\r\n                        setter: true,\r\n                    });\r\n                },\r\n            });\r\n            handlers.push(hookHandler);\r\n        }\r\n    }\r\n    return () => {\r\n        handlers.forEach((h) => h());\r\n    };\r\n}\n\nexport { initCanvas2DMutationObserver as default };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oCAAoC;AAClE,SAASC,KAAK,EAAEC,SAAS,EAAEC,UAAU,QAAQ,mBAAmB;AAChE,SAASC,aAAa,QAAQ,qBAAqB;AAEnD,SAASC,4BAA4BA,CAACC,EAAE,EAAEC,GAAG,EAAEC,UAAU,EAAEC,aAAa,EAAE;EACtE,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAMC,OAAO,GAAGC,MAAM,CAACC,mBAAmB,CAACN,GAAG,CAACO,wBAAwB,CAACC,SAAS,CAAC;EAClF,KAAK,MAAMC,IAAI,IAAIL,OAAO,EAAE;IACxB,IAAI;MACA,IAAI,OAAOJ,GAAG,CAACO,wBAAwB,CAACC,SAAS,CAACC,IAAI,CAAC,KAAK,UAAU,EAAE;QACpE;MACJ;MACA,MAAMC,cAAc,GAAGhB,KAAK,CAACM,GAAG,CAACO,wBAAwB,CAACC,SAAS,EAAEC,IAAI,EAAE,UAAUE,QAAQ,EAAE;QAC3F,OAAO,UAAU,GAAGC,IAAI,EAAE;UACtB,IAAI,CAACjB,SAAS,CAAC,IAAI,CAACkB,MAAM,EAAEZ,UAAU,EAAEC,aAAa,EAAE,IAAI,CAAC,EAAE;YAC1DY,UAAU,CAAC,MAAM;cACb,MAAMC,UAAU,GAAGlB,aAAa,CAAC,CAAC,GAAGe,IAAI,CAAC,EAAEZ,GAAG,EAAE,IAAI,CAAC;cACtDD,EAAE,CAAC,IAAI,CAACc,MAAM,EAAE;gBACZG,IAAI,EAAEvB,aAAa,CAAC,IAAI,CAAC;gBACzBwB,QAAQ,EAAER,IAAI;gBACdG,IAAI,EAAEG;cACV,CAAC,CAAC;YACN,CAAC,EAAE,CAAC,CAAC;UACT;UACA,OAAOJ,QAAQ,CAACO,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;QACrC,CAAC;MACL,CAAC,CAAC;MACFT,QAAQ,CAACgB,IAAI,CAACT,cAAc,CAAC;IACjC,CAAC,CACD,OAAOU,EAAE,EAAE;MACP,MAAMC,WAAW,GAAGzB,UAAU,CAACI,GAAG,CAACO,wBAAwB,CAACC,SAAS,EAAEC,IAAI,EAAE;QACzEa,GAAGA,CAACC,CAAC,EAAE;UACHxB,EAAE,CAAC,IAAI,CAACc,MAAM,EAAE;YACZG,IAAI,EAAEvB,aAAa,CAAC,IAAI,CAAC;YACzBwB,QAAQ,EAAER,IAAI;YACdG,IAAI,EAAE,CAACW,CAAC,CAAC;YACTC,MAAM,EAAE;UACZ,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;MACFrB,QAAQ,CAACgB,IAAI,CAACE,WAAW,CAAC;IAC9B;EACJ;EACA,OAAO,MAAM;IACTlB,QAAQ,CAACsB,OAAO,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;AACL;AAEA,SAAS5B,4BAA4B,IAAI6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}