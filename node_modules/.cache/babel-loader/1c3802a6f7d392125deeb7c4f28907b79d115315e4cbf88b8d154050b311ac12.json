{"ast":null,"code":"// RecordingCutter.js - Utility for cutting rrweb recordings into smaller clips\n\n/**\n * Converts relative seconds to absolute timestamp\n * @param {Array} events - rrweb events array\n * @param {number} relativeSeconds - Seconds from start of recording\n * @returns {number} Absolute timestamp\n */\nexport function relativeTimeToTimestamp(events, relativeSeconds) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return startTime + relativeSeconds * 1000;\n}\n\n/**\n * Converts absolute timestamp to relative seconds\n * @param {Array} events - rrweb events array\n * @param {number} timestamp - Absolute timestamp\n * @returns {number} Relative seconds from start\n */\nexport function timestampToRelativeTime(events, timestamp) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return (timestamp - startTime) / 1000;\n}\n\n/**\n * Formats seconds as MM:SS or HH:MM:SS\n * @param {number} seconds - Total seconds\n * @returns {string} Formatted time string\n */\nexport function formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const secs = Math.floor(seconds % 60);\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  }\n  return `${minutes}:${secs.toString().padStart(2, \"0\")}`;\n}\n\n/**\n * Parses time string (MM:SS, HH:MM:SS, or just seconds) to total seconds\n * @param {string} timeStr - Time string like \"1:30\", \"0:05\", \"90\", etc.\n * @returns {number} Total seconds\n */\nexport function parseTimeString(timeStr) {\n  if (!timeStr) return 0;\n\n  // If it's just a number, treat as seconds\n  if (/^\\d+$/.test(timeStr)) {\n    return parseInt(timeStr);\n  }\n\n  // Parse MM:SS or HH:MM:SS format\n  const parts = timeStr.split(\":\").map(Number);\n  if (parts.length === 2) {\n    // MM:SS\n    return parts[0] * 60 + parts[1];\n  } else if (parts.length === 3) {\n    // HH:MM:SS\n    return parts[0] * 3600 + parts[1] * 60 + parts[2];\n  }\n  return 0;\n}\n\n/**\n * Creates a synthetic full snapshot by replaying the recording up to a specific point\n * @param {Array} events - Original rrweb events array\n * @param {number} targetTimestamp - The timestamp to build the DOM state up to\n * @returns {Object} Synthetic full snapshot representing the DOM state at targetTimestamp\n */\nfunction createSyntheticSnapshot(events, targetTimestamp) {\n  console.log(`Creating synthetic full snapshot at ${targetTimestamp}ms`);\n\n  // Find all full snapshots\n  const fullSnapshots = events.filter(e => e.type === 2).sort((a, b) => a.timestamp - b.timestamp);\n  if (fullSnapshots.length === 0) {\n    throw new Error(\"No full snapshot found in recording\");\n  }\n\n  // Find the best base snapshot\n  let baseSnapshot = null;\n  let nextSnapshot = null;\n  for (let i = 0; i < fullSnapshots.length; i++) {\n    if (fullSnapshots[i].timestamp <= targetTimestamp) {\n      baseSnapshot = fullSnapshots[i];\n      if (i < fullSnapshots.length - 1) {\n        nextSnapshot = fullSnapshots[i + 1];\n      }\n    } else {\n      break;\n    }\n  }\n\n  // If no snapshot before target, use the first one\n  if (!baseSnapshot) {\n    baseSnapshot = fullSnapshots[0];\n  }\n  console.log(`Found base snapshot at ${baseSnapshot.timestamp}ms`);\n  if (nextSnapshot) {\n    console.log(`Next snapshot at ${nextSnapshot.timestamp}ms`);\n  }\n\n  // Deep clone the base snapshot\n  const syntheticSnapshot = JSON.parse(JSON.stringify(baseSnapshot));\n\n  // Update the timestamp to match our target\n  syntheticSnapshot.timestamp = targetTimestamp;\n\n  // Ensure the synthetic snapshot has all required properties\n  if (!syntheticSnapshot.data) {\n    syntheticSnapshot.data = {};\n  }\n\n  // Make sure we have the basic structure\n  if (!syntheticSnapshot.data.node) {\n    console.warn(\"Base snapshot missing node data, using minimal structure\");\n    syntheticSnapshot.data.node = {\n      type: 0,\n      // Document node\n      childNodes: [],\n      id: 1\n    };\n  }\n\n  // Ensure we have required metadata\n  if (!syntheticSnapshot.data.href && typeof window !== \"undefined\") {\n    syntheticSnapshot.data.href = window.location.href;\n  }\n  console.log(`Created synthetic snapshot for time ${targetTimestamp}ms`);\n  return syntheticSnapshot;\n}\n\n/**\n * Cuts an rrweb recording to show only events within a specific time range\n * @param {Array} events - Original rrweb events array\n * @param {number} centerTimeSeconds - Relative time in seconds from start of recording\n * @param {number} beforeSeconds - Seconds to include before the center time (default: 5)\n * @param {number} afterSeconds - Seconds to include after the center time (default: 5)\n * @returns {Array} New rrweb events array for the clipped recording\n */\nexport function cutRecording(events, centerTimeSeconds, beforeSeconds = 5, afterSeconds = 5) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    throw new Error(\"Invalid events array provided\");\n  }\n\n  // Convert relative time to absolute timestamp\n  const centerTimestamp = relativeTimeToTimestamp(events, centerTimeSeconds);\n  const beforeMs = beforeSeconds * 1000;\n  const afterMs = afterSeconds * 1000;\n  const startTime = centerTimestamp - beforeMs;\n  const endTime = centerTimestamp + afterMs;\n  console.log(`Cutting recording around ${formatTime(centerTimeSeconds)} (${centerTimeSeconds}s)`);\n  console.log(`Time range: ${formatTime(centerTimeSeconds - beforeSeconds)} to ${formatTime(centerTimeSeconds + afterSeconds)}`);\n\n  // Find the full snapshot that's closest to our cut time (before or after)\n  let fullSnapshot = null;\n  let bestDistance = Infinity;\n  for (const event of events) {\n    if (event.type === 2) {\n      const distance = Math.abs(event.timestamp - startTime);\n      if (distance < bestDistance) {\n        fullSnapshot = event;\n        bestDistance = distance;\n      }\n    }\n  }\n  if (!fullSnapshot) {\n    throw new Error(\"No full snapshot found in recording\");\n  }\n  console.log(`Using full snapshot at ${fullSnapshot.timestamp}, distance from cut: ${bestDistance}ms`);\n\n  // If the full snapshot is after our start time, we need to adjust our approach\n  if (fullSnapshot.timestamp > startTime) {\n    console.log(\"Full snapshot is after cut time, including events from start to snapshot\");\n  }\n\n  // Take a much more conservative approach: include ALL events\n  // from the closest full snapshot through our entire clip range\n  const snapshotTime = fullSnapshot.timestamp;\n  const rangeStart = Math.min(snapshotTime, startTime);\n  const rangeEnd = endTime;\n\n  // Get all events in the complete range we need\n  const neededEvents = events.filter(event => {\n    return event.timestamp >= rangeStart && event.timestamp <= rangeEnd;\n  });\n\n  // Create the new events array, ALWAYS starting with the full snapshot\n  const newEvents = [];\n\n  // Always add the full snapshot first\n  newEvents.push({\n    ...fullSnapshot,\n    timestamp: fullSnapshot.timestamp\n  });\n\n  // Add all other needed events (excluding the original full snapshot to avoid duplication)\n  for (const event of neededEvents) {\n    if (event.timestamp !== fullSnapshot.timestamp || event.type !== 2) {\n      newEvents.push({\n        ...event,\n        timestamp: event.timestamp\n      });\n    }\n  }\n\n  // Ensure we have at least 2 events total\n  if (newEvents.length < 2) {\n    const lastTimestamp = newEvents[newEvents.length - 1].timestamp;\n    newEvents.push({\n      type: 4,\n      // Meta event\n      data: {\n        href: window.location.href\n      },\n      timestamp: lastTimestamp + 100\n    });\n  }\n\n  // Sort by timestamp to ensure proper order\n  newEvents.sort((a, b) => a.timestamp - b.timestamp);\n  console.log(`Original recording: ${events.length} events`);\n  console.log(`Clipped recording: ${newEvents.length} events`);\n  console.log(`Time span: ${beforeSeconds + afterSeconds} seconds`);\n\n  // Debug: Check if we have full snapshots in the result\n  const resultSnapshots = newEvents.filter(e => e.type === 2);\n  console.log(`Full snapshots in result: ${resultSnapshots.length}`);\n  if (resultSnapshots.length === 0) {\n    console.error(\"WARNING: No full snapshots in cut result!\");\n    console.log(\"Original full snapshot timestamp:\", fullSnapshot.timestamp);\n    console.log(\"Range start:\", rangeStart, \"Range end:\", rangeEnd);\n    console.log(\"Events added:\", newEvents.map(e => ({\n      type: e.type,\n      timestamp: e.timestamp\n    })));\n  }\n  return newEvents;\n}\n\n/**\n * Finds all events of a specific type within a recording\n * @param {Array} events - rrweb events array\n * @param {number} eventType - Event type to search for (1=DOM, 2=FullSnapshot, 3=IncrementalSnapshot, etc.)\n * @returns {Array} Array of events matching the type\n */\nexport function findEventsByType(events, eventType) {\n  return events.filter(event => event.type === eventType);\n}\n\n/**\n * Finds events containing specific text or attributes\n * @param {Array} events - rrweb events array\n * @param {string} searchTerm - Text to search for\n * @returns {Array} Array of events containing the search term\n */\nexport function findEventsByContent(events, searchTerm) {\n  const matchingEvents = [];\n  for (const event of events) {\n    const eventStr = JSON.stringify(event).toLowerCase();\n    if (eventStr.includes(searchTerm.toLowerCase())) {\n      matchingEvents.push(event);\n    }\n  }\n  return matchingEvents;\n}\n\n/**\n * Analyzes a recording and provides statistics\n * @param {Array} events - rrweb events array\n * @returns {Object} Recording statistics\n */\nexport function analyzeRecording(events) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    return null;\n  }\n  const firstTimestamp = events[0].timestamp;\n  const lastTimestamp = events[events.length - 1].timestamp;\n  const duration = (lastTimestamp - firstTimestamp) / 1000; // in seconds\n\n  const eventTypeCounts = {};\n  for (const event of events) {\n    eventTypeCounts[event.type] = (eventTypeCounts[event.type] || 0) + 1;\n  }\n  return {\n    totalEvents: events.length,\n    duration: duration,\n    startTime: firstTimestamp,\n    endTime: lastTimestamp,\n    eventTypeCounts: eventTypeCounts,\n    eventTypes: {\n      1: \"DomContentLoaded\",\n      2: \"FullSnapshot\",\n      3: \"IncrementalSnapshot\",\n      4: \"Meta\",\n      5: \"Custom\",\n      6: \"Plugin\"\n    }\n  };\n}\n\n/**\n * Creates multiple clips around specified timestamps\n * @param {Array} events - Original rrweb events array\n * @param {Array} timestamps - Array of timestamps to create clips around\n * @param {number} beforeSeconds - Seconds before each timestamp\n * @param {number} afterSeconds - Seconds after each timestamp\n * @returns {Array} Array of clipped recordings\n */\nexport function createMultipleClips(events, timestamps, beforeSeconds = 5, afterSeconds = 5) {\n  const clips = [];\n  for (let i = 0; i < timestamps.length; i++) {\n    const timestamp = timestamps[i];\n    try {\n      const clip = cutRecording(events, timestamp, beforeSeconds, afterSeconds);\n      clips.push({\n        index: i,\n        centerTimestamp: timestamp,\n        events: clip,\n        duration: beforeSeconds + afterSeconds\n      });\n    } catch (error) {\n      console.error(`Failed to create clip ${i} around timestamp ${timestamp}:`, error);\n    }\n  }\n  return clips;\n}\n\n/**\n * Trims a recording to keep only events within a specific time range\n * @param {Array} events - Original rrweb events array\n * @param {number} startMs - Start time in milliseconds\n * @param {number} endMs - End time in milliseconds\n * @returns {Array} New rrweb events array for the trimmed recording\n */\nexport function trimRecording(events, startMs, endMs) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    throw new Error(\"Invalid events array provided\");\n  }\n  console.log(`Trimming recording from ${startMs}ms to ${endMs}ms`);\n\n  // Validate time range\n  const recordingStart = events[0].timestamp;\n  const recordingEnd = events[events.length - 1].timestamp;\n  if (startMs < recordingStart) {\n    console.warn(`Start time ${startMs}ms is before recording start ${recordingStart}ms, adjusting`);\n    startMs = recordingStart;\n  }\n  if (endMs > recordingEnd) {\n    console.warn(`End time ${endMs}ms is after recording end ${recordingEnd}ms, adjusting`);\n    endMs = recordingEnd;\n  }\n  if (startMs >= endMs) {\n    throw new Error(\"Invalid time range: start time must be before end time\");\n  }\n\n  // Create a synthetic full snapshot at the exact start time\n  const syntheticSnapshot = createSyntheticSnapshot(events, startMs);\n\n  // Get all events within our trim range (excluding the exact start time to avoid duplicates)\n  const eventsInRange = events.filter(event => {\n    return event.timestamp > startMs && event.timestamp <= endMs;\n  });\n  console.log(`Found ${eventsInRange.length} events in trim range`);\n\n  // Build the new events array\n  const newEvents = [];\n\n  // Always start with our synthetic full snapshot\n  newEvents.push(syntheticSnapshot);\n\n  // Add the first meta event if it exists\n  const metaEvent = events.find(e => e.type === 4);\n  if (metaEvent && !eventsInRange.some(e => e.type === 4)) {\n    // Include a meta event with adjusted timestamp\n    newEvents.push({\n      ...metaEvent,\n      timestamp: startMs + 1\n    });\n  }\n\n  // Add all events within the range (excluding any full snapshots)\n  for (const event of eventsInRange) {\n    // Skip full snapshots - we already have our synthetic one\n    if (event.type === 2) {\n      console.log(`Skipping full snapshot at ${event.timestamp}ms`);\n      continue;\n    }\n\n    // Add the event as-is\n    newEvents.push({\n      ...event,\n      timestamp: event.timestamp\n    });\n  }\n\n  // If we still only have 1 event, add a minimal incremental snapshot\n  if (newEvents.length === 1) {\n    console.log(\"Only synthetic snapshot found, adding minimal event\");\n    newEvents.push({\n      type: 3,\n      // IncrementalSnapshot\n      data: {\n        source: 0,\n        // Mutation\n        texts: [],\n        attributes: [],\n        removes: [],\n        adds: []\n      },\n      timestamp: startMs + 10\n    });\n  }\n\n  // Sort by timestamp to ensure proper order\n  newEvents.sort((a, b) => a.timestamp - b.timestamp);\n  console.log(`Original recording: ${events.length} events`);\n  console.log(`Trimmed recording: ${newEvents.length} events`);\n  console.log(`Time range: ${(endMs - startMs) / 1000} seconds`);\n\n  // Validate we have at least 2 events\n  if (newEvents.length < 2) {\n    throw new Error(`Trimmed recording has only ${newEvents.length} events, need at least 2`);\n  }\n  return newEvents;\n}","map":{"version":3,"names":["relativeTimeToTimestamp","events","relativeSeconds","length","startTime","timestamp","timestampToRelativeTime","formatTime","seconds","hours","Math","floor","minutes","secs","toString","padStart","parseTimeString","timeStr","test","parseInt","parts","split","map","Number","createSyntheticSnapshot","targetTimestamp","console","log","fullSnapshots","filter","e","type","sort","a","b","Error","baseSnapshot","nextSnapshot","i","syntheticSnapshot","JSON","parse","stringify","data","node","warn","childNodes","id","href","window","location","cutRecording","centerTimeSeconds","beforeSeconds","afterSeconds","Array","isArray","centerTimestamp","beforeMs","afterMs","endTime","fullSnapshot","bestDistance","Infinity","event","distance","abs","snapshotTime","rangeStart","min","rangeEnd","neededEvents","newEvents","push","lastTimestamp","resultSnapshots","error","findEventsByType","eventType","findEventsByContent","searchTerm","matchingEvents","eventStr","toLowerCase","includes","analyzeRecording","firstTimestamp","duration","eventTypeCounts","totalEvents","eventTypes","createMultipleClips","timestamps","clips","clip","index","trimRecording","startMs","endMs","recordingStart","recordingEnd","eventsInRange","metaEvent","find","some","source","texts","attributes","removes","adds"],"sources":["/Users/ogonen/rrweb/src/RecordingCutter.js"],"sourcesContent":["// RecordingCutter.js - Utility for cutting rrweb recordings into smaller clips\n\n/**\n * Converts relative seconds to absolute timestamp\n * @param {Array} events - rrweb events array\n * @param {number} relativeSeconds - Seconds from start of recording\n * @returns {number} Absolute timestamp\n */\nexport function relativeTimeToTimestamp(events, relativeSeconds) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return startTime + relativeSeconds * 1000;\n}\n\n/**\n * Converts absolute timestamp to relative seconds\n * @param {Array} events - rrweb events array\n * @param {number} timestamp - Absolute timestamp\n * @returns {number} Relative seconds from start\n */\nexport function timestampToRelativeTime(events, timestamp) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return (timestamp - startTime) / 1000;\n}\n\n/**\n * Formats seconds as MM:SS or HH:MM:SS\n * @param {number} seconds - Total seconds\n * @returns {string} Formatted time string\n */\nexport function formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${secs\n      .toString()\n      .padStart(2, \"0\")}`;\n  }\n  return `${minutes}:${secs.toString().padStart(2, \"0\")}`;\n}\n\n/**\n * Parses time string (MM:SS, HH:MM:SS, or just seconds) to total seconds\n * @param {string} timeStr - Time string like \"1:30\", \"0:05\", \"90\", etc.\n * @returns {number} Total seconds\n */\nexport function parseTimeString(timeStr) {\n  if (!timeStr) return 0;\n\n  // If it's just a number, treat as seconds\n  if (/^\\d+$/.test(timeStr)) {\n    return parseInt(timeStr);\n  }\n\n  // Parse MM:SS or HH:MM:SS format\n  const parts = timeStr.split(\":\").map(Number);\n  if (parts.length === 2) {\n    // MM:SS\n    return parts[0] * 60 + parts[1];\n  } else if (parts.length === 3) {\n    // HH:MM:SS\n    return parts[0] * 3600 + parts[1] * 60 + parts[2];\n  }\n\n  return 0;\n}\n\n/**\n * Creates a synthetic full snapshot by replaying the recording up to a specific point\n * @param {Array} events - Original rrweb events array\n * @param {number} targetTimestamp - The timestamp to build the DOM state up to\n * @returns {Object} Synthetic full snapshot representing the DOM state at targetTimestamp\n */\nfunction createSyntheticSnapshot(events, targetTimestamp) {\n  console.log(`Creating synthetic full snapshot at ${targetTimestamp}ms`);\n\n  // Find all full snapshots\n  const fullSnapshots = events\n    .filter((e) => e.type === 2)\n    .sort((a, b) => a.timestamp - b.timestamp);\n\n  if (fullSnapshots.length === 0) {\n    throw new Error(\"No full snapshot found in recording\");\n  }\n\n  // Find the best base snapshot\n  let baseSnapshot = null;\n  let nextSnapshot = null;\n\n  for (let i = 0; i < fullSnapshots.length; i++) {\n    if (fullSnapshots[i].timestamp <= targetTimestamp) {\n      baseSnapshot = fullSnapshots[i];\n      if (i < fullSnapshots.length - 1) {\n        nextSnapshot = fullSnapshots[i + 1];\n      }\n    } else {\n      break;\n    }\n  }\n\n  // If no snapshot before target, use the first one\n  if (!baseSnapshot) {\n    baseSnapshot = fullSnapshots[0];\n  }\n\n  console.log(`Found base snapshot at ${baseSnapshot.timestamp}ms`);\n  if (nextSnapshot) {\n    console.log(`Next snapshot at ${nextSnapshot.timestamp}ms`);\n  }\n\n  // Deep clone the base snapshot\n  const syntheticSnapshot = JSON.parse(JSON.stringify(baseSnapshot));\n\n  // Update the timestamp to match our target\n  syntheticSnapshot.timestamp = targetTimestamp;\n\n  // Ensure the synthetic snapshot has all required properties\n  if (!syntheticSnapshot.data) {\n    syntheticSnapshot.data = {};\n  }\n\n  // Make sure we have the basic structure\n  if (!syntheticSnapshot.data.node) {\n    console.warn(\"Base snapshot missing node data, using minimal structure\");\n    syntheticSnapshot.data.node = {\n      type: 0, // Document node\n      childNodes: [],\n      id: 1,\n    };\n  }\n\n  // Ensure we have required metadata\n  if (!syntheticSnapshot.data.href && typeof window !== \"undefined\") {\n    syntheticSnapshot.data.href = window.location.href;\n  }\n\n  console.log(`Created synthetic snapshot for time ${targetTimestamp}ms`);\n\n  return syntheticSnapshot;\n}\n\n/**\n * Cuts an rrweb recording to show only events within a specific time range\n * @param {Array} events - Original rrweb events array\n * @param {number} centerTimeSeconds - Relative time in seconds from start of recording\n * @param {number} beforeSeconds - Seconds to include before the center time (default: 5)\n * @param {number} afterSeconds - Seconds to include after the center time (default: 5)\n * @returns {Array} New rrweb events array for the clipped recording\n */\nexport function cutRecording(\n  events,\n  centerTimeSeconds,\n  beforeSeconds = 5,\n  afterSeconds = 5\n) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    throw new Error(\"Invalid events array provided\");\n  }\n\n  // Convert relative time to absolute timestamp\n  const centerTimestamp = relativeTimeToTimestamp(events, centerTimeSeconds);\n\n  const beforeMs = beforeSeconds * 1000;\n  const afterMs = afterSeconds * 1000;\n  const startTime = centerTimestamp - beforeMs;\n  const endTime = centerTimestamp + afterMs;\n\n  console.log(\n    `Cutting recording around ${formatTime(\n      centerTimeSeconds\n    )} (${centerTimeSeconds}s)`\n  );\n  console.log(\n    `Time range: ${formatTime(\n      centerTimeSeconds - beforeSeconds\n    )} to ${formatTime(centerTimeSeconds + afterSeconds)}`\n  );\n\n  // Find the full snapshot that's closest to our cut time (before or after)\n  let fullSnapshot = null;\n  let bestDistance = Infinity;\n\n  for (const event of events) {\n    if (event.type === 2) {\n      const distance = Math.abs(event.timestamp - startTime);\n      if (distance < bestDistance) {\n        fullSnapshot = event;\n        bestDistance = distance;\n      }\n    }\n  }\n\n  if (!fullSnapshot) {\n    throw new Error(\"No full snapshot found in recording\");\n  }\n\n  console.log(\n    `Using full snapshot at ${fullSnapshot.timestamp}, distance from cut: ${bestDistance}ms`\n  );\n\n  // If the full snapshot is after our start time, we need to adjust our approach\n  if (fullSnapshot.timestamp > startTime) {\n    console.log(\n      \"Full snapshot is after cut time, including events from start to snapshot\"\n    );\n  }\n\n  // Take a much more conservative approach: include ALL events\n  // from the closest full snapshot through our entire clip range\n  const snapshotTime = fullSnapshot.timestamp;\n  const rangeStart = Math.min(snapshotTime, startTime);\n  const rangeEnd = endTime;\n\n  // Get all events in the complete range we need\n  const neededEvents = events.filter((event) => {\n    return event.timestamp >= rangeStart && event.timestamp <= rangeEnd;\n  });\n\n  // Create the new events array, ALWAYS starting with the full snapshot\n  const newEvents = [];\n\n  // Always add the full snapshot first\n  newEvents.push({\n    ...fullSnapshot,\n    timestamp: fullSnapshot.timestamp,\n  });\n\n  // Add all other needed events (excluding the original full snapshot to avoid duplication)\n  for (const event of neededEvents) {\n    if (event.timestamp !== fullSnapshot.timestamp || event.type !== 2) {\n      newEvents.push({\n        ...event,\n        timestamp: event.timestamp,\n      });\n    }\n  }\n\n  // Ensure we have at least 2 events total\n  if (newEvents.length < 2) {\n    const lastTimestamp = newEvents[newEvents.length - 1].timestamp;\n    newEvents.push({\n      type: 4, // Meta event\n      data: { href: window.location.href },\n      timestamp: lastTimestamp + 100,\n    });\n  }\n\n  // Sort by timestamp to ensure proper order\n  newEvents.sort((a, b) => a.timestamp - b.timestamp);\n\n  console.log(`Original recording: ${events.length} events`);\n  console.log(`Clipped recording: ${newEvents.length} events`);\n  console.log(`Time span: ${beforeSeconds + afterSeconds} seconds`);\n\n  // Debug: Check if we have full snapshots in the result\n  const resultSnapshots = newEvents.filter((e) => e.type === 2);\n  console.log(`Full snapshots in result: ${resultSnapshots.length}`);\n\n  if (resultSnapshots.length === 0) {\n    console.error(\"WARNING: No full snapshots in cut result!\");\n    console.log(\"Original full snapshot timestamp:\", fullSnapshot.timestamp);\n    console.log(\"Range start:\", rangeStart, \"Range end:\", rangeEnd);\n    console.log(\n      \"Events added:\",\n      newEvents.map((e) => ({ type: e.type, timestamp: e.timestamp }))\n    );\n  }\n\n  return newEvents;\n}\n\n/**\n * Finds all events of a specific type within a recording\n * @param {Array} events - rrweb events array\n * @param {number} eventType - Event type to search for (1=DOM, 2=FullSnapshot, 3=IncrementalSnapshot, etc.)\n * @returns {Array} Array of events matching the type\n */\nexport function findEventsByType(events, eventType) {\n  return events.filter((event) => event.type === eventType);\n}\n\n/**\n * Finds events containing specific text or attributes\n * @param {Array} events - rrweb events array\n * @param {string} searchTerm - Text to search for\n * @returns {Array} Array of events containing the search term\n */\nexport function findEventsByContent(events, searchTerm) {\n  const matchingEvents = [];\n\n  for (const event of events) {\n    const eventStr = JSON.stringify(event).toLowerCase();\n    if (eventStr.includes(searchTerm.toLowerCase())) {\n      matchingEvents.push(event);\n    }\n  }\n\n  return matchingEvents;\n}\n\n/**\n * Analyzes a recording and provides statistics\n * @param {Array} events - rrweb events array\n * @returns {Object} Recording statistics\n */\nexport function analyzeRecording(events) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    return null;\n  }\n\n  const firstTimestamp = events[0].timestamp;\n  const lastTimestamp = events[events.length - 1].timestamp;\n  const duration = (lastTimestamp - firstTimestamp) / 1000; // in seconds\n\n  const eventTypeCounts = {};\n  for (const event of events) {\n    eventTypeCounts[event.type] = (eventTypeCounts[event.type] || 0) + 1;\n  }\n\n  return {\n    totalEvents: events.length,\n    duration: duration,\n    startTime: firstTimestamp,\n    endTime: lastTimestamp,\n    eventTypeCounts: eventTypeCounts,\n    eventTypes: {\n      1: \"DomContentLoaded\",\n      2: \"FullSnapshot\",\n      3: \"IncrementalSnapshot\",\n      4: \"Meta\",\n      5: \"Custom\",\n      6: \"Plugin\",\n    },\n  };\n}\n\n/**\n * Creates multiple clips around specified timestamps\n * @param {Array} events - Original rrweb events array\n * @param {Array} timestamps - Array of timestamps to create clips around\n * @param {number} beforeSeconds - Seconds before each timestamp\n * @param {number} afterSeconds - Seconds after each timestamp\n * @returns {Array} Array of clipped recordings\n */\nexport function createMultipleClips(\n  events,\n  timestamps,\n  beforeSeconds = 5,\n  afterSeconds = 5\n) {\n  const clips = [];\n\n  for (let i = 0; i < timestamps.length; i++) {\n    const timestamp = timestamps[i];\n    try {\n      const clip = cutRecording(events, timestamp, beforeSeconds, afterSeconds);\n      clips.push({\n        index: i,\n        centerTimestamp: timestamp,\n        events: clip,\n        duration: beforeSeconds + afterSeconds,\n      });\n    } catch (error) {\n      console.error(\n        `Failed to create clip ${i} around timestamp ${timestamp}:`,\n        error\n      );\n    }\n  }\n\n  return clips;\n}\n\n/**\n * Trims a recording to keep only events within a specific time range\n * @param {Array} events - Original rrweb events array\n * @param {number} startMs - Start time in milliseconds\n * @param {number} endMs - End time in milliseconds\n * @returns {Array} New rrweb events array for the trimmed recording\n */\nexport function trimRecording(events, startMs, endMs) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    throw new Error(\"Invalid events array provided\");\n  }\n\n  console.log(`Trimming recording from ${startMs}ms to ${endMs}ms`);\n\n  // Validate time range\n  const recordingStart = events[0].timestamp;\n  const recordingEnd = events[events.length - 1].timestamp;\n\n  if (startMs < recordingStart) {\n    console.warn(\n      `Start time ${startMs}ms is before recording start ${recordingStart}ms, adjusting`\n    );\n    startMs = recordingStart;\n  }\n\n  if (endMs > recordingEnd) {\n    console.warn(\n      `End time ${endMs}ms is after recording end ${recordingEnd}ms, adjusting`\n    );\n    endMs = recordingEnd;\n  }\n\n  if (startMs >= endMs) {\n    throw new Error(\"Invalid time range: start time must be before end time\");\n  }\n\n  // Create a synthetic full snapshot at the exact start time\n  const syntheticSnapshot = createSyntheticSnapshot(events, startMs);\n\n  // Get all events within our trim range (excluding the exact start time to avoid duplicates)\n  const eventsInRange = events.filter((event) => {\n    return event.timestamp > startMs && event.timestamp <= endMs;\n  });\n\n  console.log(`Found ${eventsInRange.length} events in trim range`);\n\n  // Build the new events array\n  const newEvents = [];\n\n  // Always start with our synthetic full snapshot\n  newEvents.push(syntheticSnapshot);\n\n  // Add the first meta event if it exists\n  const metaEvent = events.find((e) => e.type === 4);\n  if (metaEvent && !eventsInRange.some((e) => e.type === 4)) {\n    // Include a meta event with adjusted timestamp\n    newEvents.push({\n      ...metaEvent,\n      timestamp: startMs + 1,\n    });\n  }\n\n  // Add all events within the range (excluding any full snapshots)\n  for (const event of eventsInRange) {\n    // Skip full snapshots - we already have our synthetic one\n    if (event.type === 2) {\n      console.log(`Skipping full snapshot at ${event.timestamp}ms`);\n      continue;\n    }\n\n    // Add the event as-is\n    newEvents.push({\n      ...event,\n      timestamp: event.timestamp,\n    });\n  }\n\n  // If we still only have 1 event, add a minimal incremental snapshot\n  if (newEvents.length === 1) {\n    console.log(\"Only synthetic snapshot found, adding minimal event\");\n    newEvents.push({\n      type: 3, // IncrementalSnapshot\n      data: {\n        source: 0, // Mutation\n        texts: [],\n        attributes: [],\n        removes: [],\n        adds: [],\n      },\n      timestamp: startMs + 10,\n    });\n  }\n\n  // Sort by timestamp to ensure proper order\n  newEvents.sort((a, b) => a.timestamp - b.timestamp);\n\n  console.log(`Original recording: ${events.length} events`);\n  console.log(`Trimmed recording: ${newEvents.length} events`);\n  console.log(`Time range: ${(endMs - startMs) / 1000} seconds`);\n\n  // Validate we have at least 2 events\n  if (newEvents.length < 2) {\n    throw new Error(\n      `Trimmed recording has only ${newEvents.length} events, need at least 2`\n    );\n  }\n\n  return newEvents;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}