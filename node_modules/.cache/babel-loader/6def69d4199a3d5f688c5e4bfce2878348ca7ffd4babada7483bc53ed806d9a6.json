{"ast":null,"code":"var NodeType$1;\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$1 || (NodeType$1 = {}));\nvar Mirror$1 = function () {\n  function Mirror() {\n    this.idNodeMap = new Map();\n    this.nodeMetaMap = new WeakMap();\n  }\n  Mirror.prototype.getId = function (n) {\n    var _a;\n    if (!n) return -1;\n    var id = (_a = this.getMeta(n)) === null || _a === void 0 ? void 0 : _a.id;\n    return id !== null && id !== void 0 ? id : -1;\n  };\n  Mirror.prototype.getNode = function (id) {\n    return this.idNodeMap.get(id) || null;\n  };\n  Mirror.prototype.getIds = function () {\n    return Array.from(this.idNodeMap.keys());\n  };\n  Mirror.prototype.getMeta = function (n) {\n    return this.nodeMetaMap.get(n) || null;\n  };\n  Mirror.prototype.removeNodeFromMap = function (n) {\n    var _this = this;\n    var id = this.getId(n);\n    this.idNodeMap[\"delete\"](id);\n    if (n.childNodes) {\n      n.childNodes.forEach(function (childNode) {\n        return _this.removeNodeFromMap(childNode);\n      });\n    }\n  };\n  Mirror.prototype.has = function (id) {\n    return this.idNodeMap.has(id);\n  };\n  Mirror.prototype.hasNode = function (node) {\n    return this.nodeMetaMap.has(node);\n  };\n  Mirror.prototype.add = function (n, meta) {\n    var id = meta.id;\n    this.idNodeMap.set(id, n);\n    this.nodeMetaMap.set(n, meta);\n  };\n  Mirror.prototype.replace = function (id, n) {\n    var oldNode = this.getNode(id);\n    if (oldNode) {\n      var meta = this.nodeMetaMap.get(oldNode);\n      if (meta) this.nodeMetaMap.set(n, meta);\n    }\n    this.idNodeMap.set(id, n);\n  };\n  Mirror.prototype.reset = function () {\n    this.idNodeMap = new Map();\n    this.nodeMetaMap = new WeakMap();\n  };\n  return Mirror;\n}();\nfunction createMirror$1() {\n  return new Mirror$1();\n}\nfunction parseCSSText(cssText) {\n  const res = {};\n  const listDelimiter = /;(?![^(]*\\))/g;\n  const propertyDelimiter = /:(.+)/;\n  const comment = /\\/\\*.*?\\*\\//g;\n  cssText.replace(comment, '').split(listDelimiter).forEach(function (item) {\n    if (item) {\n      const tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[camelize(tmp[0].trim())] = tmp[1].trim());\n    }\n  });\n  return res;\n}\nfunction toCSSText(style) {\n  const properties = [];\n  for (const name in style) {\n    const value = style[name];\n    if (typeof value !== 'string') continue;\n    const normalizedName = hyphenate(name);\n    properties.push(`${normalizedName}: ${value};`);\n  }\n  return properties.join(' ');\n}\nconst camelizeRE = /-([a-z])/g;\nconst CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9-]+$/;\nconst camelize = str => {\n  if (CUSTOM_PROPERTY_REGEX.test(str)) return str;\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '');\n};\nconst hyphenateRE = /\\B([A-Z])/g;\nconst hyphenate = str => {\n  return str.replace(hyphenateRE, '-$1').toLowerCase();\n};\nclass BaseRRNode {\n  constructor(..._args) {\n    this.childNodes = [];\n    this.parentElement = null;\n    this.parentNode = null;\n    this.ELEMENT_NODE = NodeType.ELEMENT_NODE;\n    this.TEXT_NODE = NodeType.TEXT_NODE;\n  }\n  get firstChild() {\n    return this.childNodes[0] || null;\n  }\n  get lastChild() {\n    return this.childNodes[this.childNodes.length - 1] || null;\n  }\n  get nextSibling() {\n    const parentNode = this.parentNode;\n    if (!parentNode) return null;\n    const siblings = parentNode.childNodes;\n    const index = siblings.indexOf(this);\n    return siblings[index + 1] || null;\n  }\n  contains(node) {\n    if (node === this) return true;\n    for (const child of this.childNodes) {\n      if (child.contains(node)) return true;\n    }\n    return false;\n  }\n  appendChild(_newChild) {\n    throw new Error(`RRDomException: Failed to execute 'appendChild' on 'RRNode': This RRNode type does not support this method.`);\n  }\n  insertBefore(_newChild, _refChild) {\n    throw new Error(`RRDomException: Failed to execute 'insertBefore' on 'RRNode': This RRNode type does not support this method.`);\n  }\n  removeChild(_node) {\n    throw new Error(`RRDomException: Failed to execute 'removeChild' on 'RRNode': This RRNode type does not support this method.`);\n  }\n  toString() {\n    return 'RRNode';\n  }\n}\nfunction BaseRRDocumentImpl(RRNodeClass) {\n  return class BaseRRDocument extends RRNodeClass {\n    constructor() {\n      super(...arguments);\n      this.nodeType = NodeType.DOCUMENT_NODE;\n      this.nodeName = '#document';\n      this.compatMode = 'CSS1Compat';\n      this.RRNodeType = NodeType$1.Document;\n      this.textContent = null;\n    }\n    get documentElement() {\n      return this.childNodes.find(node => node.RRNodeType === NodeType$1.Element && node.tagName === 'HTML') || null;\n    }\n    get body() {\n      var _a;\n      return ((_a = this.documentElement) === null || _a === void 0 ? void 0 : _a.childNodes.find(node => node.RRNodeType === NodeType$1.Element && node.tagName === 'BODY')) || null;\n    }\n    get head() {\n      var _a;\n      return ((_a = this.documentElement) === null || _a === void 0 ? void 0 : _a.childNodes.find(node => node.RRNodeType === NodeType$1.Element && node.tagName === 'HEAD')) || null;\n    }\n    get implementation() {\n      return this;\n    }\n    get firstElementChild() {\n      return this.documentElement;\n    }\n    appendChild(childNode) {\n      const nodeType = childNode.RRNodeType;\n      if (nodeType === NodeType$1.Element || nodeType === NodeType$1.DocumentType) {\n        if (this.childNodes.some(s => s.RRNodeType === nodeType)) {\n          throw new Error(`RRDomException: Failed to execute 'appendChild' on 'RRNode': Only one ${nodeType === NodeType$1.Element ? 'RRElement' : 'RRDoctype'} on RRDocument allowed.`);\n        }\n      }\n      childNode.parentElement = null;\n      childNode.parentNode = this;\n      this.childNodes.push(childNode);\n      return childNode;\n    }\n    insertBefore(newChild, refChild) {\n      const nodeType = newChild.RRNodeType;\n      if (nodeType === NodeType$1.Element || nodeType === NodeType$1.DocumentType) {\n        if (this.childNodes.some(s => s.RRNodeType === nodeType)) {\n          throw new Error(`RRDomException: Failed to execute 'insertBefore' on 'RRNode': Only one ${nodeType === NodeType$1.Element ? 'RRElement' : 'RRDoctype'} on RRDocument allowed.`);\n        }\n      }\n      if (refChild === null) return this.appendChild(newChild);\n      const childIndex = this.childNodes.indexOf(refChild);\n      if (childIndex == -1) throw new Error(\"Failed to execute 'insertBefore' on 'RRNode': The RRNode before which the new node is to be inserted is not a child of this RRNode.\");\n      this.childNodes.splice(childIndex, 0, newChild);\n      newChild.parentElement = null;\n      newChild.parentNode = this;\n      return newChild;\n    }\n    removeChild(node) {\n      const indexOfChild = this.childNodes.indexOf(node);\n      if (indexOfChild === -1) throw new Error(\"Failed to execute 'removeChild' on 'RRDocument': The RRNode to be removed is not a child of this RRNode.\");\n      this.childNodes.splice(indexOfChild, 1);\n      node.parentElement = null;\n      node.parentNode = null;\n      return node;\n    }\n    open() {\n      this.childNodes = [];\n    }\n    close() {}\n    write(content) {\n      let publicId;\n      if (content === '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">') publicId = '-//W3C//DTD XHTML 1.0 Transitional//EN';else if (content === '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">') publicId = '-//W3C//DTD HTML 4.0 Transitional//EN';\n      if (publicId) {\n        const doctype = this.createDocumentType('html', publicId, '');\n        this.open();\n        this.appendChild(doctype);\n      }\n    }\n    createDocument(_namespace, _qualifiedName, _doctype) {\n      return new BaseRRDocument();\n    }\n    createDocumentType(qualifiedName, publicId, systemId) {\n      const doctype = new (BaseRRDocumentTypeImpl(BaseRRNode))(qualifiedName, publicId, systemId);\n      doctype.ownerDocument = this;\n      return doctype;\n    }\n    createElement(tagName) {\n      const element = new (BaseRRElementImpl(BaseRRNode))(tagName);\n      element.ownerDocument = this;\n      return element;\n    }\n    createElementNS(_namespaceURI, qualifiedName) {\n      return this.createElement(qualifiedName);\n    }\n    createTextNode(data) {\n      const text = new (BaseRRTextImpl(BaseRRNode))(data);\n      text.ownerDocument = this;\n      return text;\n    }\n    createComment(data) {\n      const comment = new (BaseRRCommentImpl(BaseRRNode))(data);\n      comment.ownerDocument = this;\n      return comment;\n    }\n    createCDATASection(data) {\n      const CDATASection = new (BaseRRCDATASectionImpl(BaseRRNode))(data);\n      CDATASection.ownerDocument = this;\n      return CDATASection;\n    }\n    toString() {\n      return 'RRDocument';\n    }\n  };\n}\nfunction BaseRRDocumentTypeImpl(RRNodeClass) {\n  return class BaseRRDocumentType extends RRNodeClass {\n    constructor(qualifiedName, publicId, systemId) {\n      super();\n      this.nodeType = NodeType.DOCUMENT_TYPE_NODE;\n      this.RRNodeType = NodeType$1.DocumentType;\n      this.textContent = null;\n      this.name = qualifiedName;\n      this.publicId = publicId;\n      this.systemId = systemId;\n      this.nodeName = qualifiedName;\n    }\n    toString() {\n      return 'RRDocumentType';\n    }\n  };\n}\nfunction BaseRRElementImpl(RRNodeClass) {\n  return class BaseRRElement extends RRNodeClass {\n    constructor(tagName) {\n      super();\n      this.nodeType = NodeType.ELEMENT_NODE;\n      this.RRNodeType = NodeType$1.Element;\n      this.attributes = {};\n      this.shadowRoot = null;\n      this.tagName = tagName.toUpperCase();\n      this.nodeName = tagName.toUpperCase();\n    }\n    get textContent() {\n      let result = '';\n      this.childNodes.forEach(node => result += node.textContent);\n      return result;\n    }\n    set textContent(textContent) {\n      this.childNodes = [this.ownerDocument.createTextNode(textContent)];\n    }\n    get classList() {\n      return new ClassList(this.attributes.class, newClassName => {\n        this.attributes.class = newClassName;\n      });\n    }\n    get id() {\n      return this.attributes.id || '';\n    }\n    get className() {\n      return this.attributes.class || '';\n    }\n    get style() {\n      const style = this.attributes.style ? parseCSSText(this.attributes.style) : {};\n      const hyphenateRE = /\\B([A-Z])/g;\n      style.setProperty = (name, value, priority) => {\n        if (hyphenateRE.test(name)) return;\n        const normalizedName = camelize(name);\n        if (!value) delete style[normalizedName];else style[normalizedName] = value;\n        if (priority === 'important') style[normalizedName] += ' !important';\n        this.attributes.style = toCSSText(style);\n      };\n      style.removeProperty = name => {\n        if (hyphenateRE.test(name)) return '';\n        const normalizedName = camelize(name);\n        const value = style[normalizedName] || '';\n        delete style[normalizedName];\n        this.attributes.style = toCSSText(style);\n        return value;\n      };\n      return style;\n    }\n    getAttribute(name) {\n      return this.attributes[name] || null;\n    }\n    setAttribute(name, attribute) {\n      this.attributes[name] = attribute;\n    }\n    setAttributeNS(_namespace, qualifiedName, value) {\n      this.setAttribute(qualifiedName, value);\n    }\n    removeAttribute(name) {\n      delete this.attributes[name];\n    }\n    appendChild(newChild) {\n      this.childNodes.push(newChild);\n      newChild.parentNode = this;\n      newChild.parentElement = this;\n      return newChild;\n    }\n    insertBefore(newChild, refChild) {\n      if (refChild === null) return this.appendChild(newChild);\n      const childIndex = this.childNodes.indexOf(refChild);\n      if (childIndex == -1) throw new Error(\"Failed to execute 'insertBefore' on 'RRNode': The RRNode before which the new node is to be inserted is not a child of this RRNode.\");\n      this.childNodes.splice(childIndex, 0, newChild);\n      newChild.parentElement = this;\n      newChild.parentNode = this;\n      return newChild;\n    }\n    removeChild(node) {\n      const indexOfChild = this.childNodes.indexOf(node);\n      if (indexOfChild === -1) throw new Error(\"Failed to execute 'removeChild' on 'RRElement': The RRNode to be removed is not a child of this RRNode.\");\n      this.childNodes.splice(indexOfChild, 1);\n      node.parentElement = null;\n      node.parentNode = null;\n      return node;\n    }\n    attachShadow(_init) {\n      const shadowRoot = this.ownerDocument.createElement('SHADOWROOT');\n      this.shadowRoot = shadowRoot;\n      return shadowRoot;\n    }\n    dispatchEvent(_event) {\n      return true;\n    }\n    toString() {\n      let attributeString = '';\n      for (const attribute in this.attributes) {\n        attributeString += `${attribute}=\"${this.attributes[attribute]}\" `;\n      }\n      return `${this.tagName} ${attributeString}`;\n    }\n  };\n}\nfunction BaseRRMediaElementImpl(RRElementClass) {\n  return class BaseRRMediaElement extends RRElementClass {\n    attachShadow(_init) {\n      throw new Error(`RRDomException: Failed to execute 'attachShadow' on 'RRElement': This RRElement does not support attachShadow`);\n    }\n    play() {\n      this.paused = false;\n    }\n    pause() {\n      this.paused = true;\n    }\n  };\n}\nfunction BaseRRTextImpl(RRNodeClass) {\n  return class BaseRRText extends RRNodeClass {\n    constructor(data) {\n      super();\n      this.nodeType = NodeType.TEXT_NODE;\n      this.nodeName = '#text';\n      this.RRNodeType = NodeType$1.Text;\n      this.data = data;\n    }\n    get textContent() {\n      return this.data;\n    }\n    set textContent(textContent) {\n      this.data = textContent;\n    }\n    toString() {\n      return `RRText text=${JSON.stringify(this.data)}`;\n    }\n  };\n}\nfunction BaseRRCommentImpl(RRNodeClass) {\n  return class BaseRRComment extends RRNodeClass {\n    constructor(data) {\n      super();\n      this.nodeType = NodeType.COMMENT_NODE;\n      this.nodeName = '#comment';\n      this.RRNodeType = NodeType$1.Comment;\n      this.data = data;\n    }\n    get textContent() {\n      return this.data;\n    }\n    set textContent(textContent) {\n      this.data = textContent;\n    }\n    toString() {\n      return `RRComment text=${JSON.stringify(this.data)}`;\n    }\n  };\n}\nfunction BaseRRCDATASectionImpl(RRNodeClass) {\n  return class BaseRRCDATASection extends RRNodeClass {\n    constructor(data) {\n      super();\n      this.nodeName = '#cdata-section';\n      this.nodeType = NodeType.CDATA_SECTION_NODE;\n      this.RRNodeType = NodeType$1.CDATA;\n      this.data = data;\n    }\n    get textContent() {\n      return this.data;\n    }\n    set textContent(textContent) {\n      this.data = textContent;\n    }\n    toString() {\n      return `RRCDATASection data=${JSON.stringify(this.data)}`;\n    }\n  };\n}\nclass ClassList {\n  constructor(classText, onChange) {\n    this.classes = [];\n    this.add = (...classNames) => {\n      for (const item of classNames) {\n        const className = String(item);\n        if (this.classes.indexOf(className) >= 0) continue;\n        this.classes.push(className);\n      }\n      this.onChange && this.onChange(this.classes.join(' '));\n    };\n    this.remove = (...classNames) => {\n      this.classes = this.classes.filter(item => classNames.indexOf(item) === -1);\n      this.onChange && this.onChange(this.classes.join(' '));\n    };\n    if (classText) {\n      const classes = classText.trim().split(/\\s+/);\n      this.classes.push(...classes);\n    }\n    this.onChange = onChange;\n  }\n}\nvar NodeType;\n(function (NodeType) {\n  NodeType[NodeType[\"PLACEHOLDER\"] = 0] = \"PLACEHOLDER\";\n  NodeType[NodeType[\"ELEMENT_NODE\"] = 1] = \"ELEMENT_NODE\";\n  NodeType[NodeType[\"ATTRIBUTE_NODE\"] = 2] = \"ATTRIBUTE_NODE\";\n  NodeType[NodeType[\"TEXT_NODE\"] = 3] = \"TEXT_NODE\";\n  NodeType[NodeType[\"CDATA_SECTION_NODE\"] = 4] = \"CDATA_SECTION_NODE\";\n  NodeType[NodeType[\"ENTITY_REFERENCE_NODE\"] = 5] = \"ENTITY_REFERENCE_NODE\";\n  NodeType[NodeType[\"ENTITY_NODE\"] = 6] = \"ENTITY_NODE\";\n  NodeType[NodeType[\"PROCESSING_INSTRUCTION_NODE\"] = 7] = \"PROCESSING_INSTRUCTION_NODE\";\n  NodeType[NodeType[\"COMMENT_NODE\"] = 8] = \"COMMENT_NODE\";\n  NodeType[NodeType[\"DOCUMENT_NODE\"] = 9] = \"DOCUMENT_NODE\";\n  NodeType[NodeType[\"DOCUMENT_TYPE_NODE\"] = 10] = \"DOCUMENT_TYPE_NODE\";\n  NodeType[NodeType[\"DOCUMENT_FRAGMENT_NODE\"] = 11] = \"DOCUMENT_FRAGMENT_NODE\";\n})(NodeType || (NodeType = {}));\nconst NAMESPACES = {\n  svg: 'http://www.w3.org/2000/svg',\n  'xlink:href': 'http://www.w3.org/1999/xlink',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n};\nconst SVGTagMap = {\n  altglyph: 'altGlyph',\n  altglyphdef: 'altGlyphDef',\n  altglyphitem: 'altGlyphItem',\n  animatecolor: 'animateColor',\n  animatemotion: 'animateMotion',\n  animatetransform: 'animateTransform',\n  clippath: 'clipPath',\n  feblend: 'feBlend',\n  fecolormatrix: 'feColorMatrix',\n  fecomponenttransfer: 'feComponentTransfer',\n  fecomposite: 'feComposite',\n  feconvolvematrix: 'feConvolveMatrix',\n  fediffuselighting: 'feDiffuseLighting',\n  fedisplacementmap: 'feDisplacementMap',\n  fedistantlight: 'feDistantLight',\n  fedropshadow: 'feDropShadow',\n  feflood: 'feFlood',\n  fefunca: 'feFuncA',\n  fefuncb: 'feFuncB',\n  fefuncg: 'feFuncG',\n  fefuncr: 'feFuncR',\n  fegaussianblur: 'feGaussianBlur',\n  feimage: 'feImage',\n  femerge: 'feMerge',\n  femergenode: 'feMergeNode',\n  femorphology: 'feMorphology',\n  feoffset: 'feOffset',\n  fepointlight: 'fePointLight',\n  fespecularlighting: 'feSpecularLighting',\n  fespotlight: 'feSpotLight',\n  fetile: 'feTile',\n  feturbulence: 'feTurbulence',\n  foreignobject: 'foreignObject',\n  glyphref: 'glyphRef',\n  lineargradient: 'linearGradient',\n  radialgradient: 'radialGradient'\n};\nfunction diff(oldTree, newTree, replayer, rrnodeMirror) {\n  const oldChildren = oldTree.childNodes;\n  const newChildren = newTree.childNodes;\n  rrnodeMirror = rrnodeMirror || newTree.mirror || newTree.ownerDocument.mirror;\n  if (oldChildren.length > 0 || newChildren.length > 0) {\n    diffChildren(Array.from(oldChildren), newChildren, oldTree, replayer, rrnodeMirror);\n  }\n  let inputDataToApply = null,\n    scrollDataToApply = null;\n  switch (newTree.RRNodeType) {\n    case NodeType$1.Document:\n      {\n        const newRRDocument = newTree;\n        scrollDataToApply = newRRDocument.scrollData;\n        break;\n      }\n    case NodeType$1.Element:\n      {\n        const oldElement = oldTree;\n        const newRRElement = newTree;\n        diffProps(oldElement, newRRElement, rrnodeMirror);\n        scrollDataToApply = newRRElement.scrollData;\n        inputDataToApply = newRRElement.inputData;\n        switch (newRRElement.tagName) {\n          case 'AUDIO':\n          case 'VIDEO':\n            {\n              const oldMediaElement = oldTree;\n              const newMediaRRElement = newRRElement;\n              if (newMediaRRElement.paused !== undefined) newMediaRRElement.paused ? void oldMediaElement.pause() : void oldMediaElement.play();\n              if (newMediaRRElement.muted !== undefined) oldMediaElement.muted = newMediaRRElement.muted;\n              if (newMediaRRElement.volume !== undefined) oldMediaElement.volume = newMediaRRElement.volume;\n              if (newMediaRRElement.currentTime !== undefined) oldMediaElement.currentTime = newMediaRRElement.currentTime;\n              if (newMediaRRElement.playbackRate !== undefined) oldMediaElement.playbackRate = newMediaRRElement.playbackRate;\n              break;\n            }\n          case 'CANVAS':\n            {\n              const rrCanvasElement = newTree;\n              if (rrCanvasElement.rr_dataURL !== null) {\n                const image = document.createElement('img');\n                image.onload = () => {\n                  const ctx = oldElement.getContext('2d');\n                  if (ctx) {\n                    ctx.drawImage(image, 0, 0, image.width, image.height);\n                  }\n                };\n                image.src = rrCanvasElement.rr_dataURL;\n              }\n              rrCanvasElement.canvasMutations.forEach(canvasMutation => replayer.applyCanvas(canvasMutation.event, canvasMutation.mutation, oldTree));\n            }\n            break;\n          case 'STYLE':\n            {\n              const styleSheet = oldElement.sheet;\n              styleSheet && newTree.rules.forEach(data => replayer.applyStyleSheetMutation(data, styleSheet));\n            }\n            break;\n        }\n        if (newRRElement.shadowRoot) {\n          if (!oldElement.shadowRoot) oldElement.attachShadow({\n            mode: 'open'\n          });\n          const oldChildren = oldElement.shadowRoot.childNodes;\n          const newChildren = newRRElement.shadowRoot.childNodes;\n          if (oldChildren.length > 0 || newChildren.length > 0) diffChildren(Array.from(oldChildren), newChildren, oldElement.shadowRoot, replayer, rrnodeMirror);\n        }\n        break;\n      }\n    case NodeType$1.Text:\n    case NodeType$1.Comment:\n    case NodeType$1.CDATA:\n      if (oldTree.textContent !== newTree.data) oldTree.textContent = newTree.data;\n      break;\n  }\n  scrollDataToApply && replayer.applyScroll(scrollDataToApply, true);\n  inputDataToApply && replayer.applyInput(inputDataToApply);\n  if (newTree.nodeName === 'IFRAME') {\n    const oldContentDocument = oldTree.contentDocument;\n    const newIFrameElement = newTree;\n    if (oldContentDocument) {\n      const sn = rrnodeMirror.getMeta(newIFrameElement.contentDocument);\n      if (sn) {\n        replayer.mirror.add(oldContentDocument, Object.assign({}, sn));\n      }\n      diff(oldContentDocument, newIFrameElement.contentDocument, replayer, rrnodeMirror);\n    }\n  }\n}\nfunction diffProps(oldTree, newTree, rrnodeMirror) {\n  const oldAttributes = oldTree.attributes;\n  const newAttributes = newTree.attributes;\n  for (const name in newAttributes) {\n    const newValue = newAttributes[name];\n    const sn = rrnodeMirror.getMeta(newTree);\n    if (sn && 'isSVG' in sn && sn.isSVG && NAMESPACES[name]) oldTree.setAttributeNS(NAMESPACES[name], name, newValue);else if (newTree.tagName === 'CANVAS' && name === 'rr_dataURL') {\n      const image = document.createElement('img');\n      image.src = newValue;\n      image.onload = () => {\n        const ctx = oldTree.getContext('2d');\n        if (ctx) {\n          ctx.drawImage(image, 0, 0, image.width, image.height);\n        }\n      };\n    } else oldTree.setAttribute(name, newValue);\n  }\n  for (const {\n    name\n  } of Array.from(oldAttributes)) if (!(name in newAttributes)) oldTree.removeAttribute(name);\n  newTree.scrollLeft && (oldTree.scrollLeft = newTree.scrollLeft);\n  newTree.scrollTop && (oldTree.scrollTop = newTree.scrollTop);\n}\nfunction diffChildren(oldChildren, newChildren, parentNode, replayer, rrnodeMirror) {\n  var _a;\n  let oldStartIndex = 0,\n    oldEndIndex = oldChildren.length - 1,\n    newStartIndex = 0,\n    newEndIndex = newChildren.length - 1;\n  let oldStartNode = oldChildren[oldStartIndex],\n    oldEndNode = oldChildren[oldEndIndex],\n    newStartNode = newChildren[newStartIndex],\n    newEndNode = newChildren[newEndIndex];\n  let oldIdToIndex = undefined,\n    indexInOld;\n  while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\n    const oldStartId = replayer.mirror.getId(oldStartNode);\n    const oldEndId = replayer.mirror.getId(oldEndNode);\n    const newStartId = rrnodeMirror.getId(newStartNode);\n    const newEndId = rrnodeMirror.getId(newEndNode);\n    if (oldStartNode === undefined) {\n      oldStartNode = oldChildren[++oldStartIndex];\n    } else if (oldEndNode === undefined) {\n      oldEndNode = oldChildren[--oldEndIndex];\n    } else if (oldStartId !== -1 && oldStartId === newStartId) {\n      diff(oldStartNode, newStartNode, replayer, rrnodeMirror);\n      oldStartNode = oldChildren[++oldStartIndex];\n      newStartNode = newChildren[++newStartIndex];\n    } else if (oldEndId !== -1 && oldEndId === newEndId) {\n      diff(oldEndNode, newEndNode, replayer, rrnodeMirror);\n      oldEndNode = oldChildren[--oldEndIndex];\n      newEndNode = newChildren[--newEndIndex];\n    } else if (oldStartId !== -1 && oldStartId === newEndId) {\n      parentNode.insertBefore(oldStartNode, oldEndNode.nextSibling);\n      diff(oldStartNode, newEndNode, replayer, rrnodeMirror);\n      oldStartNode = oldChildren[++oldStartIndex];\n      newEndNode = newChildren[--newEndIndex];\n    } else if (oldEndId !== -1 && oldEndId === newStartId) {\n      parentNode.insertBefore(oldEndNode, oldStartNode);\n      diff(oldEndNode, newStartNode, replayer, rrnodeMirror);\n      oldEndNode = oldChildren[--oldEndIndex];\n      newStartNode = newChildren[++newStartIndex];\n    } else {\n      if (!oldIdToIndex) {\n        oldIdToIndex = {};\n        for (let i = oldStartIndex; i <= oldEndIndex; i++) {\n          const oldChild = oldChildren[i];\n          if (oldChild && replayer.mirror.hasNode(oldChild)) oldIdToIndex[replayer.mirror.getId(oldChild)] = i;\n        }\n      }\n      indexInOld = oldIdToIndex[rrnodeMirror.getId(newStartNode)];\n      if (indexInOld) {\n        const nodeToMove = oldChildren[indexInOld];\n        parentNode.insertBefore(nodeToMove, oldStartNode);\n        diff(nodeToMove, newStartNode, replayer, rrnodeMirror);\n        oldChildren[indexInOld] = undefined;\n      } else {\n        const newNode = createOrGetNode(newStartNode, replayer.mirror, rrnodeMirror);\n        if (parentNode.nodeName === '#document' && ((_a = replayer.mirror.getMeta(newNode)) === null || _a === void 0 ? void 0 : _a.type) === NodeType$1.Element && parentNode.documentElement) {\n          parentNode.removeChild(parentNode.documentElement);\n          oldChildren[oldStartIndex] = undefined;\n          oldStartNode = undefined;\n        }\n        parentNode.insertBefore(newNode, oldStartNode || null);\n        diff(newNode, newStartNode, replayer, rrnodeMirror);\n      }\n      newStartNode = newChildren[++newStartIndex];\n    }\n  }\n  if (oldStartIndex > oldEndIndex) {\n    const referenceRRNode = newChildren[newEndIndex + 1];\n    let referenceNode = null;\n    if (referenceRRNode) parentNode.childNodes.forEach(child => {\n      if (replayer.mirror.getId(child) === rrnodeMirror.getId(referenceRRNode)) referenceNode = child;\n    });\n    for (; newStartIndex <= newEndIndex; ++newStartIndex) {\n      const newNode = createOrGetNode(newChildren[newStartIndex], replayer.mirror, rrnodeMirror);\n      parentNode.insertBefore(newNode, referenceNode);\n      diff(newNode, newChildren[newStartIndex], replayer, rrnodeMirror);\n    }\n  } else if (newStartIndex > newEndIndex) {\n    for (; oldStartIndex <= oldEndIndex; oldStartIndex++) {\n      const node = oldChildren[oldStartIndex];\n      if (node) {\n        parentNode.removeChild(node);\n        replayer.mirror.removeNodeFromMap(node);\n      }\n    }\n  }\n}\nfunction createOrGetNode(rrNode, domMirror, rrnodeMirror) {\n  const nodeId = rrnodeMirror.getId(rrNode);\n  const sn = rrnodeMirror.getMeta(rrNode);\n  let node = null;\n  if (nodeId > -1) node = domMirror.getNode(nodeId);\n  if (node !== null) return node;\n  switch (rrNode.RRNodeType) {\n    case NodeType$1.Document:\n      node = new Document();\n      break;\n    case NodeType$1.DocumentType:\n      node = document.implementation.createDocumentType(rrNode.name, rrNode.publicId, rrNode.systemId);\n      break;\n    case NodeType$1.Element:\n      {\n        let tagName = rrNode.tagName.toLowerCase();\n        tagName = SVGTagMap[tagName] || tagName;\n        if (sn && 'isSVG' in sn && (sn === null || sn === void 0 ? void 0 : sn.isSVG)) {\n          node = document.createElementNS(NAMESPACES['svg'], tagName);\n        } else node = document.createElement(rrNode.tagName);\n        break;\n      }\n    case NodeType$1.Text:\n      node = document.createTextNode(rrNode.data);\n      break;\n    case NodeType$1.Comment:\n      node = document.createComment(rrNode.data);\n      break;\n    case NodeType$1.CDATA:\n      node = document.createCDATASection(rrNode.data);\n      break;\n  }\n  if (sn) domMirror.add(node, Object.assign({}, sn));\n  return node;\n}\nclass RRDocument extends BaseRRDocumentImpl(BaseRRNode) {\n  constructor(mirror) {\n    super();\n    this.UNSERIALIZED_STARTING_ID = -2;\n    this._unserializedId = this.UNSERIALIZED_STARTING_ID;\n    this.mirror = createMirror();\n    this.scrollData = null;\n    if (mirror) {\n      this.mirror = mirror;\n    }\n  }\n  get unserializedId() {\n    return this._unserializedId--;\n  }\n  createDocument(_namespace, _qualifiedName, _doctype) {\n    return new RRDocument();\n  }\n  createDocumentType(qualifiedName, publicId, systemId) {\n    const documentTypeNode = new RRDocumentType(qualifiedName, publicId, systemId);\n    documentTypeNode.ownerDocument = this;\n    return documentTypeNode;\n  }\n  createElement(tagName) {\n    const upperTagName = tagName.toUpperCase();\n    let element;\n    switch (upperTagName) {\n      case 'AUDIO':\n      case 'VIDEO':\n        element = new RRMediaElement(upperTagName);\n        break;\n      case 'IFRAME':\n        element = new RRIFrameElement(upperTagName, this.mirror);\n        break;\n      case 'CANVAS':\n        element = new RRCanvasElement(upperTagName);\n        break;\n      case 'STYLE':\n        element = new RRStyleElement(upperTagName);\n        break;\n      default:\n        element = new RRElement(upperTagName);\n        break;\n    }\n    element.ownerDocument = this;\n    return element;\n  }\n  createComment(data) {\n    const commentNode = new RRComment(data);\n    commentNode.ownerDocument = this;\n    return commentNode;\n  }\n  createCDATASection(data) {\n    const sectionNode = new RRCDATASection(data);\n    sectionNode.ownerDocument = this;\n    return sectionNode;\n  }\n  createTextNode(data) {\n    const textNode = new RRText(data);\n    textNode.ownerDocument = this;\n    return textNode;\n  }\n  destroyTree() {\n    this.childNodes = [];\n    this.mirror.reset();\n  }\n  open() {\n    super.open();\n    this._unserializedId = this.UNSERIALIZED_STARTING_ID;\n  }\n}\nconst RRDocumentType = BaseRRDocumentTypeImpl(BaseRRNode);\nclass RRElement extends BaseRRElementImpl(BaseRRNode) {\n  constructor() {\n    super(...arguments);\n    this.inputData = null;\n    this.scrollData = null;\n  }\n}\nclass RRMediaElement extends BaseRRMediaElementImpl(RRElement) {}\nclass RRCanvasElement extends RRElement {\n  constructor() {\n    super(...arguments);\n    this.rr_dataURL = null;\n    this.canvasMutations = [];\n  }\n  getContext() {\n    return null;\n  }\n}\nclass RRStyleElement extends RRElement {\n  constructor() {\n    super(...arguments);\n    this.rules = [];\n  }\n}\nclass RRIFrameElement extends RRElement {\n  constructor(upperTagName, mirror) {\n    super(upperTagName);\n    this.contentDocument = new RRDocument();\n    this.contentDocument.mirror = mirror;\n  }\n}\nconst RRText = BaseRRTextImpl(BaseRRNode);\nconst RRComment = BaseRRCommentImpl(BaseRRNode);\nconst RRCDATASection = BaseRRCDATASectionImpl(BaseRRNode);\nfunction getValidTagName(element) {\n  if (element instanceof HTMLFormElement) {\n    return 'FORM';\n  }\n  return element.tagName.toUpperCase();\n}\nfunction buildFromNode(node, rrdom, domMirror, parentRRNode) {\n  let rrNode;\n  switch (node.nodeType) {\n    case NodeType.DOCUMENT_NODE:\n      if (parentRRNode && parentRRNode.nodeName === 'IFRAME') rrNode = parentRRNode.contentDocument;else {\n        rrNode = rrdom;\n        rrNode.compatMode = node.compatMode;\n      }\n      break;\n    case NodeType.DOCUMENT_TYPE_NODE:\n      {\n        const documentType = node;\n        rrNode = rrdom.createDocumentType(documentType.name, documentType.publicId, documentType.systemId);\n        break;\n      }\n    case NodeType.ELEMENT_NODE:\n      {\n        const elementNode = node;\n        const tagName = getValidTagName(elementNode);\n        rrNode = rrdom.createElement(tagName);\n        const rrElement = rrNode;\n        for (const {\n          name,\n          value\n        } of Array.from(elementNode.attributes)) {\n          rrElement.attributes[name] = value;\n        }\n        elementNode.scrollLeft && (rrElement.scrollLeft = elementNode.scrollLeft);\n        elementNode.scrollTop && (rrElement.scrollTop = elementNode.scrollTop);\n        break;\n      }\n    case NodeType.TEXT_NODE:\n      rrNode = rrdom.createTextNode(node.textContent || '');\n      break;\n    case NodeType.CDATA_SECTION_NODE:\n      rrNode = rrdom.createCDATASection(node.data);\n      break;\n    case NodeType.COMMENT_NODE:\n      rrNode = rrdom.createComment(node.textContent || '');\n      break;\n    case NodeType.DOCUMENT_FRAGMENT_NODE:\n      rrNode = parentRRNode.attachShadow({\n        mode: 'open'\n      });\n      break;\n    default:\n      return null;\n  }\n  let sn = domMirror.getMeta(node);\n  if (rrdom instanceof RRDocument) {\n    if (!sn) {\n      sn = getDefaultSN(rrNode, rrdom.unserializedId);\n      domMirror.add(node, sn);\n    }\n    rrdom.mirror.add(rrNode, Object.assign({}, sn));\n  }\n  return rrNode;\n}\nfunction buildFromDom(dom, domMirror = createMirror$1(), rrdom = new RRDocument()) {\n  function walk(node, parentRRNode) {\n    const rrNode = buildFromNode(node, rrdom, domMirror, parentRRNode);\n    if (rrNode === null) return;\n    if ((parentRRNode === null || parentRRNode === void 0 ? void 0 : parentRRNode.nodeName) !== 'IFRAME' && node.nodeType !== NodeType.DOCUMENT_FRAGMENT_NODE) {\n      parentRRNode === null || parentRRNode === void 0 ? void 0 : parentRRNode.appendChild(rrNode);\n      rrNode.parentNode = parentRRNode;\n      rrNode.parentElement = parentRRNode;\n    }\n    if (node.nodeName === 'IFRAME') {\n      const iframeDoc = node.contentDocument;\n      iframeDoc && walk(iframeDoc, rrNode);\n    } else if (node.nodeType === NodeType.DOCUMENT_NODE || node.nodeType === NodeType.ELEMENT_NODE || node.nodeType === NodeType.DOCUMENT_FRAGMENT_NODE) {\n      if (node.nodeType === NodeType.ELEMENT_NODE && node.shadowRoot) walk(node.shadowRoot, rrNode);\n      node.childNodes.forEach(childNode => walk(childNode, rrNode));\n    }\n  }\n  walk(dom, null);\n  return rrdom;\n}\nfunction createMirror() {\n  return new Mirror();\n}\nclass Mirror {\n  constructor() {\n    this.idNodeMap = new Map();\n    this.nodeMetaMap = new WeakMap();\n  }\n  getId(n) {\n    var _a;\n    if (!n) return -1;\n    const id = (_a = this.getMeta(n)) === null || _a === void 0 ? void 0 : _a.id;\n    return id !== null && id !== void 0 ? id : -1;\n  }\n  getNode(id) {\n    return this.idNodeMap.get(id) || null;\n  }\n  getIds() {\n    return Array.from(this.idNodeMap.keys());\n  }\n  getMeta(n) {\n    return this.nodeMetaMap.get(n) || null;\n  }\n  removeNodeFromMap(n) {\n    const id = this.getId(n);\n    this.idNodeMap.delete(id);\n    if (n.childNodes) {\n      n.childNodes.forEach(childNode => this.removeNodeFromMap(childNode));\n    }\n  }\n  has(id) {\n    return this.idNodeMap.has(id);\n  }\n  hasNode(node) {\n    return this.nodeMetaMap.has(node);\n  }\n  add(n, meta) {\n    const id = meta.id;\n    this.idNodeMap.set(id, n);\n    this.nodeMetaMap.set(n, meta);\n  }\n  replace(id, n) {\n    const oldNode = this.getNode(id);\n    if (oldNode) {\n      const meta = this.nodeMetaMap.get(oldNode);\n      if (meta) this.nodeMetaMap.set(n, meta);\n    }\n    this.idNodeMap.set(id, n);\n  }\n  reset() {\n    this.idNodeMap = new Map();\n    this.nodeMetaMap = new WeakMap();\n  }\n}\nfunction getDefaultSN(node, id) {\n  switch (node.RRNodeType) {\n    case NodeType$1.Document:\n      return {\n        id,\n        type: node.RRNodeType,\n        childNodes: []\n      };\n    case NodeType$1.DocumentType:\n      {\n        const doctype = node;\n        return {\n          id,\n          type: node.RRNodeType,\n          name: doctype.name,\n          publicId: doctype.publicId,\n          systemId: doctype.systemId\n        };\n      }\n    case NodeType$1.Element:\n      return {\n        id,\n        type: node.RRNodeType,\n        tagName: node.tagName.toLowerCase(),\n        attributes: {},\n        childNodes: []\n      };\n    case NodeType$1.Text:\n      return {\n        id,\n        type: node.RRNodeType,\n        textContent: node.textContent || ''\n      };\n    case NodeType$1.Comment:\n      return {\n        id,\n        type: node.RRNodeType,\n        textContent: node.textContent || ''\n      };\n    case NodeType$1.CDATA:\n      return {\n        id,\n        type: node.RRNodeType,\n        textContent: ''\n      };\n  }\n}\nexport { BaseRRCDATASectionImpl, BaseRRCommentImpl, BaseRRDocumentImpl, BaseRRDocumentTypeImpl, BaseRRElementImpl, BaseRRMediaElementImpl, BaseRRNode, BaseRRTextImpl, ClassList, Mirror, NodeType, RRCDATASection, RRCanvasElement, RRComment, RRDocument, RRDocumentType, RRElement, RRIFrameElement, RRMediaElement, BaseRRNode as RRNode, RRStyleElement, RRText, buildFromDom, buildFromNode, createMirror, createOrGetNode, diff, getDefaultSN };","map":{"version":3,"names":["NodeType$1","NodeType","Mirror$1","Mirror","idNodeMap","Map","nodeMetaMap","WeakMap","prototype","getId","n","_a","id","getMeta","getNode","get","getIds","Array","from","keys","removeNodeFromMap","_this","childNodes","forEach","childNode","has","hasNode","node","add","meta","set","replace","oldNode","reset","createMirror$1","parseCSSText","cssText","res","listDelimiter","propertyDelimiter","comment","split","item","tmp","length","camelize","trim","toCSSText","style","properties","name","value","normalizedName","hyphenate","push","join","camelizeRE","CUSTOM_PROPERTY_REGEX","str","test","_","c","toUpperCase","hyphenateRE","toLowerCase","BaseRRNode","constructor","_args","parentElement","parentNode","ELEMENT_NODE","TEXT_NODE","firstChild","lastChild","nextSibling","siblings","index","indexOf","contains","child","appendChild","_newChild","Error","insertBefore","_refChild","removeChild","_node","toString","BaseRRDocumentImpl","RRNodeClass","BaseRRDocument","arguments","nodeType","DOCUMENT_NODE","nodeName","compatMode","RRNodeType","Document","textContent","documentElement","find","Element","tagName","body","head","implementation","firstElementChild","DocumentType","some","s","newChild","refChild","childIndex","splice","indexOfChild","open","close","write","content","publicId","doctype","createDocumentType","createDocument","_namespace","_qualifiedName","_doctype","qualifiedName","systemId","BaseRRDocumentTypeImpl","ownerDocument","createElement","element","BaseRRElementImpl","createElementNS","_namespaceURI","createTextNode","data","text","BaseRRTextImpl","createComment","BaseRRCommentImpl","createCDATASection","CDATASection","BaseRRCDATASectionImpl","BaseRRDocumentType","DOCUMENT_TYPE_NODE","BaseRRElement","attributes","shadowRoot","result","classList","ClassList","class","newClassName","className","setProperty","priority","removeProperty","getAttribute","setAttribute","attribute","setAttributeNS","removeAttribute","attachShadow","_init","dispatchEvent","_event","attributeString","BaseRRMediaElementImpl","RRElementClass","BaseRRMediaElement","play","paused","pause","BaseRRText","Text","JSON","stringify","BaseRRComment","COMMENT_NODE","Comment","BaseRRCDATASection","CDATA_SECTION_NODE","CDATA","classText","onChange","classes","classNames","String","remove","filter","NAMESPACES","svg","xmlns","SVGTagMap","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","clippath","feblend","fecolormatrix","fecomponenttransfer","fecomposite","feconvolvematrix","fediffuselighting","fedisplacementmap","fedistantlight","fedropshadow","feflood","fefunca","fefuncb","fefuncg","fefuncr","fegaussianblur","feimage","femerge","femergenode","femorphology","feoffset","fepointlight","fespecularlighting","fespotlight","fetile","feturbulence","foreignobject","glyphref","lineargradient","radialgradient","diff","oldTree","newTree","replayer","rrnodeMirror","oldChildren","newChildren","mirror","diffChildren","inputDataToApply","scrollDataToApply","newRRDocument","scrollData","oldElement","newRRElement","diffProps","inputData","oldMediaElement","newMediaRRElement","undefined","muted","volume","currentTime","playbackRate","rrCanvasElement","rr_dataURL","image","document","onload","ctx","getContext","drawImage","width","height","src","canvasMutations","canvasMutation","applyCanvas","event","mutation","styleSheet","sheet","rules","applyStyleSheetMutation","mode","applyScroll","applyInput","oldContentDocument","contentDocument","newIFrameElement","sn","Object","assign","oldAttributes","newAttributes","newValue","isSVG","scrollLeft","scrollTop","oldStartIndex","oldEndIndex","newStartIndex","newEndIndex","oldStartNode","oldEndNode","newStartNode","newEndNode","oldIdToIndex","indexInOld","oldStartId","oldEndId","newStartId","newEndId","i","oldChild","nodeToMove","newNode","createOrGetNode","type","referenceRRNode","referenceNode","rrNode","domMirror","nodeId","RRDocument","UNSERIALIZED_STARTING_ID","_unserializedId","createMirror","unserializedId","documentTypeNode","RRDocumentType","upperTagName","RRMediaElement","RRIFrameElement","RRCanvasElement","RRStyleElement","RRElement","commentNode","RRComment","sectionNode","RRCDATASection","textNode","RRText","destroyTree","getValidTagName","HTMLFormElement","buildFromNode","rrdom","parentRRNode","documentType","elementNode","rrElement","DOCUMENT_FRAGMENT_NODE","getDefaultSN","buildFromDom","dom","walk","iframeDoc","delete","RRNode"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrdom/es/rrdom.js"],"sourcesContent":["var NodeType$1;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\r\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\r\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\r\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\r\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\r\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\r\n})(NodeType$1 || (NodeType$1 = {}));\nvar Mirror$1 = (function () {\r\n    function Mirror() {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    }\r\n    Mirror.prototype.getId = function (n) {\r\n        var _a;\r\n        if (!n)\r\n            return -1;\r\n        var id = (_a = this.getMeta(n)) === null || _a === void 0 ? void 0 : _a.id;\r\n        return id !== null && id !== void 0 ? id : -1;\r\n    };\r\n    Mirror.prototype.getNode = function (id) {\r\n        return this.idNodeMap.get(id) || null;\r\n    };\r\n    Mirror.prototype.getIds = function () {\r\n        return Array.from(this.idNodeMap.keys());\r\n    };\r\n    Mirror.prototype.getMeta = function (n) {\r\n        return this.nodeMetaMap.get(n) || null;\r\n    };\r\n    Mirror.prototype.removeNodeFromMap = function (n) {\r\n        var _this = this;\r\n        var id = this.getId(n);\r\n        this.idNodeMap[\"delete\"](id);\r\n        if (n.childNodes) {\r\n            n.childNodes.forEach(function (childNode) {\r\n                return _this.removeNodeFromMap(childNode);\r\n            });\r\n        }\r\n    };\r\n    Mirror.prototype.has = function (id) {\r\n        return this.idNodeMap.has(id);\r\n    };\r\n    Mirror.prototype.hasNode = function (node) {\r\n        return this.nodeMetaMap.has(node);\r\n    };\r\n    Mirror.prototype.add = function (n, meta) {\r\n        var id = meta.id;\r\n        this.idNodeMap.set(id, n);\r\n        this.nodeMetaMap.set(n, meta);\r\n    };\r\n    Mirror.prototype.replace = function (id, n) {\r\n        var oldNode = this.getNode(id);\r\n        if (oldNode) {\r\n            var meta = this.nodeMetaMap.get(oldNode);\r\n            if (meta)\r\n                this.nodeMetaMap.set(n, meta);\r\n        }\r\n        this.idNodeMap.set(id, n);\r\n    };\r\n    Mirror.prototype.reset = function () {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    };\r\n    return Mirror;\r\n}());\r\nfunction createMirror$1() {\r\n    return new Mirror$1();\r\n}\n\nfunction parseCSSText(cssText) {\r\n    const res = {};\r\n    const listDelimiter = /;(?![^(]*\\))/g;\r\n    const propertyDelimiter = /:(.+)/;\r\n    const comment = /\\/\\*.*?\\*\\//g;\r\n    cssText\r\n        .replace(comment, '')\r\n        .split(listDelimiter)\r\n        .forEach(function (item) {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiter);\r\n            tmp.length > 1 && (res[camelize(tmp[0].trim())] = tmp[1].trim());\r\n        }\r\n    });\r\n    return res;\r\n}\r\nfunction toCSSText(style) {\r\n    const properties = [];\r\n    for (const name in style) {\r\n        const value = style[name];\r\n        if (typeof value !== 'string')\r\n            continue;\r\n        const normalizedName = hyphenate(name);\r\n        properties.push(`${normalizedName}: ${value};`);\r\n    }\r\n    return properties.join(' ');\r\n}\r\nconst camelizeRE = /-([a-z])/g;\r\nconst CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9-]+$/;\r\nconst camelize = (str) => {\r\n    if (CUSTOM_PROPERTY_REGEX.test(str))\r\n        return str;\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n};\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\nconst hyphenate = (str) => {\r\n    return str.replace(hyphenateRE, '-$1').toLowerCase();\r\n};\n\nclass BaseRRNode {\r\n    constructor(..._args) {\r\n        this.childNodes = [];\r\n        this.parentElement = null;\r\n        this.parentNode = null;\r\n        this.ELEMENT_NODE = NodeType.ELEMENT_NODE;\r\n        this.TEXT_NODE = NodeType.TEXT_NODE;\r\n    }\r\n    get firstChild() {\r\n        return this.childNodes[0] || null;\r\n    }\r\n    get lastChild() {\r\n        return this.childNodes[this.childNodes.length - 1] || null;\r\n    }\r\n    get nextSibling() {\r\n        const parentNode = this.parentNode;\r\n        if (!parentNode)\r\n            return null;\r\n        const siblings = parentNode.childNodes;\r\n        const index = siblings.indexOf(this);\r\n        return siblings[index + 1] || null;\r\n    }\r\n    contains(node) {\r\n        if (node === this)\r\n            return true;\r\n        for (const child of this.childNodes) {\r\n            if (child.contains(node))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    appendChild(_newChild) {\r\n        throw new Error(`RRDomException: Failed to execute 'appendChild' on 'RRNode': This RRNode type does not support this method.`);\r\n    }\r\n    insertBefore(_newChild, _refChild) {\r\n        throw new Error(`RRDomException: Failed to execute 'insertBefore' on 'RRNode': This RRNode type does not support this method.`);\r\n    }\r\n    removeChild(_node) {\r\n        throw new Error(`RRDomException: Failed to execute 'removeChild' on 'RRNode': This RRNode type does not support this method.`);\r\n    }\r\n    toString() {\r\n        return 'RRNode';\r\n    }\r\n}\r\nfunction BaseRRDocumentImpl(RRNodeClass) {\r\n    return class BaseRRDocument extends RRNodeClass {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.nodeType = NodeType.DOCUMENT_NODE;\r\n            this.nodeName = '#document';\r\n            this.compatMode = 'CSS1Compat';\r\n            this.RRNodeType = NodeType$1.Document;\r\n            this.textContent = null;\r\n        }\r\n        get documentElement() {\r\n            return (this.childNodes.find((node) => node.RRNodeType === NodeType$1.Element &&\r\n                node.tagName === 'HTML') || null);\r\n        }\r\n        get body() {\r\n            var _a;\r\n            return (((_a = this.documentElement) === null || _a === void 0 ? void 0 : _a.childNodes.find((node) => node.RRNodeType === NodeType$1.Element &&\r\n                node.tagName === 'BODY')) || null);\r\n        }\r\n        get head() {\r\n            var _a;\r\n            return (((_a = this.documentElement) === null || _a === void 0 ? void 0 : _a.childNodes.find((node) => node.RRNodeType === NodeType$1.Element &&\r\n                node.tagName === 'HEAD')) || null);\r\n        }\r\n        get implementation() {\r\n            return this;\r\n        }\r\n        get firstElementChild() {\r\n            return this.documentElement;\r\n        }\r\n        appendChild(childNode) {\r\n            const nodeType = childNode.RRNodeType;\r\n            if (nodeType === NodeType$1.Element ||\r\n                nodeType === NodeType$1.DocumentType) {\r\n                if (this.childNodes.some((s) => s.RRNodeType === nodeType)) {\r\n                    throw new Error(`RRDomException: Failed to execute 'appendChild' on 'RRNode': Only one ${nodeType === NodeType$1.Element ? 'RRElement' : 'RRDoctype'} on RRDocument allowed.`);\r\n                }\r\n            }\r\n            childNode.parentElement = null;\r\n            childNode.parentNode = this;\r\n            this.childNodes.push(childNode);\r\n            return childNode;\r\n        }\r\n        insertBefore(newChild, refChild) {\r\n            const nodeType = newChild.RRNodeType;\r\n            if (nodeType === NodeType$1.Element ||\r\n                nodeType === NodeType$1.DocumentType) {\r\n                if (this.childNodes.some((s) => s.RRNodeType === nodeType)) {\r\n                    throw new Error(`RRDomException: Failed to execute 'insertBefore' on 'RRNode': Only one ${nodeType === NodeType$1.Element ? 'RRElement' : 'RRDoctype'} on RRDocument allowed.`);\r\n                }\r\n            }\r\n            if (refChild === null)\r\n                return this.appendChild(newChild);\r\n            const childIndex = this.childNodes.indexOf(refChild);\r\n            if (childIndex == -1)\r\n                throw new Error(\"Failed to execute 'insertBefore' on 'RRNode': The RRNode before which the new node is to be inserted is not a child of this RRNode.\");\r\n            this.childNodes.splice(childIndex, 0, newChild);\r\n            newChild.parentElement = null;\r\n            newChild.parentNode = this;\r\n            return newChild;\r\n        }\r\n        removeChild(node) {\r\n            const indexOfChild = this.childNodes.indexOf(node);\r\n            if (indexOfChild === -1)\r\n                throw new Error(\"Failed to execute 'removeChild' on 'RRDocument': The RRNode to be removed is not a child of this RRNode.\");\r\n            this.childNodes.splice(indexOfChild, 1);\r\n            node.parentElement = null;\r\n            node.parentNode = null;\r\n            return node;\r\n        }\r\n        open() {\r\n            this.childNodes = [];\r\n        }\r\n        close() {\r\n        }\r\n        write(content) {\r\n            let publicId;\r\n            if (content ===\r\n                '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">')\r\n                publicId = '-//W3C//DTD XHTML 1.0 Transitional//EN';\r\n            else if (content ===\r\n                '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">')\r\n                publicId = '-//W3C//DTD HTML 4.0 Transitional//EN';\r\n            if (publicId) {\r\n                const doctype = this.createDocumentType('html', publicId, '');\r\n                this.open();\r\n                this.appendChild(doctype);\r\n            }\r\n        }\r\n        createDocument(_namespace, _qualifiedName, _doctype) {\r\n            return new BaseRRDocument();\r\n        }\r\n        createDocumentType(qualifiedName, publicId, systemId) {\r\n            const doctype = new (BaseRRDocumentTypeImpl(BaseRRNode))(qualifiedName, publicId, systemId);\r\n            doctype.ownerDocument = this;\r\n            return doctype;\r\n        }\r\n        createElement(tagName) {\r\n            const element = new (BaseRRElementImpl(BaseRRNode))(tagName);\r\n            element.ownerDocument = this;\r\n            return element;\r\n        }\r\n        createElementNS(_namespaceURI, qualifiedName) {\r\n            return this.createElement(qualifiedName);\r\n        }\r\n        createTextNode(data) {\r\n            const text = new (BaseRRTextImpl(BaseRRNode))(data);\r\n            text.ownerDocument = this;\r\n            return text;\r\n        }\r\n        createComment(data) {\r\n            const comment = new (BaseRRCommentImpl(BaseRRNode))(data);\r\n            comment.ownerDocument = this;\r\n            return comment;\r\n        }\r\n        createCDATASection(data) {\r\n            const CDATASection = new (BaseRRCDATASectionImpl(BaseRRNode))(data);\r\n            CDATASection.ownerDocument = this;\r\n            return CDATASection;\r\n        }\r\n        toString() {\r\n            return 'RRDocument';\r\n        }\r\n    };\r\n}\r\nfunction BaseRRDocumentTypeImpl(RRNodeClass) {\r\n    return class BaseRRDocumentType extends RRNodeClass {\r\n        constructor(qualifiedName, publicId, systemId) {\r\n            super();\r\n            this.nodeType = NodeType.DOCUMENT_TYPE_NODE;\r\n            this.RRNodeType = NodeType$1.DocumentType;\r\n            this.textContent = null;\r\n            this.name = qualifiedName;\r\n            this.publicId = publicId;\r\n            this.systemId = systemId;\r\n            this.nodeName = qualifiedName;\r\n        }\r\n        toString() {\r\n            return 'RRDocumentType';\r\n        }\r\n    };\r\n}\r\nfunction BaseRRElementImpl(RRNodeClass) {\r\n    return class BaseRRElement extends RRNodeClass {\r\n        constructor(tagName) {\r\n            super();\r\n            this.nodeType = NodeType.ELEMENT_NODE;\r\n            this.RRNodeType = NodeType$1.Element;\r\n            this.attributes = {};\r\n            this.shadowRoot = null;\r\n            this.tagName = tagName.toUpperCase();\r\n            this.nodeName = tagName.toUpperCase();\r\n        }\r\n        get textContent() {\r\n            let result = '';\r\n            this.childNodes.forEach((node) => (result += node.textContent));\r\n            return result;\r\n        }\r\n        set textContent(textContent) {\r\n            this.childNodes = [this.ownerDocument.createTextNode(textContent)];\r\n        }\r\n        get classList() {\r\n            return new ClassList(this.attributes.class, (newClassName) => {\r\n                this.attributes.class = newClassName;\r\n            });\r\n        }\r\n        get id() {\r\n            return this.attributes.id || '';\r\n        }\r\n        get className() {\r\n            return this.attributes.class || '';\r\n        }\r\n        get style() {\r\n            const style = (this.attributes.style\r\n                ? parseCSSText(this.attributes.style)\r\n                : {});\r\n            const hyphenateRE = /\\B([A-Z])/g;\r\n            style.setProperty = (name, value, priority) => {\r\n                if (hyphenateRE.test(name))\r\n                    return;\r\n                const normalizedName = camelize(name);\r\n                if (!value)\r\n                    delete style[normalizedName];\r\n                else\r\n                    style[normalizedName] = value;\r\n                if (priority === 'important')\r\n                    style[normalizedName] += ' !important';\r\n                this.attributes.style = toCSSText(style);\r\n            };\r\n            style.removeProperty = (name) => {\r\n                if (hyphenateRE.test(name))\r\n                    return '';\r\n                const normalizedName = camelize(name);\r\n                const value = style[normalizedName] || '';\r\n                delete style[normalizedName];\r\n                this.attributes.style = toCSSText(style);\r\n                return value;\r\n            };\r\n            return style;\r\n        }\r\n        getAttribute(name) {\r\n            return this.attributes[name] || null;\r\n        }\r\n        setAttribute(name, attribute) {\r\n            this.attributes[name] = attribute;\r\n        }\r\n        setAttributeNS(_namespace, qualifiedName, value) {\r\n            this.setAttribute(qualifiedName, value);\r\n        }\r\n        removeAttribute(name) {\r\n            delete this.attributes[name];\r\n        }\r\n        appendChild(newChild) {\r\n            this.childNodes.push(newChild);\r\n            newChild.parentNode = this;\r\n            newChild.parentElement = this;\r\n            return newChild;\r\n        }\r\n        insertBefore(newChild, refChild) {\r\n            if (refChild === null)\r\n                return this.appendChild(newChild);\r\n            const childIndex = this.childNodes.indexOf(refChild);\r\n            if (childIndex == -1)\r\n                throw new Error(\"Failed to execute 'insertBefore' on 'RRNode': The RRNode before which the new node is to be inserted is not a child of this RRNode.\");\r\n            this.childNodes.splice(childIndex, 0, newChild);\r\n            newChild.parentElement = this;\r\n            newChild.parentNode = this;\r\n            return newChild;\r\n        }\r\n        removeChild(node) {\r\n            const indexOfChild = this.childNodes.indexOf(node);\r\n            if (indexOfChild === -1)\r\n                throw new Error(\"Failed to execute 'removeChild' on 'RRElement': The RRNode to be removed is not a child of this RRNode.\");\r\n            this.childNodes.splice(indexOfChild, 1);\r\n            node.parentElement = null;\r\n            node.parentNode = null;\r\n            return node;\r\n        }\r\n        attachShadow(_init) {\r\n            const shadowRoot = this.ownerDocument.createElement('SHADOWROOT');\r\n            this.shadowRoot = shadowRoot;\r\n            return shadowRoot;\r\n        }\r\n        dispatchEvent(_event) {\r\n            return true;\r\n        }\r\n        toString() {\r\n            let attributeString = '';\r\n            for (const attribute in this.attributes) {\r\n                attributeString += `${attribute}=\"${this.attributes[attribute]}\" `;\r\n            }\r\n            return `${this.tagName} ${attributeString}`;\r\n        }\r\n    };\r\n}\r\nfunction BaseRRMediaElementImpl(RRElementClass) {\r\n    return class BaseRRMediaElement extends RRElementClass {\r\n        attachShadow(_init) {\r\n            throw new Error(`RRDomException: Failed to execute 'attachShadow' on 'RRElement': This RRElement does not support attachShadow`);\r\n        }\r\n        play() {\r\n            this.paused = false;\r\n        }\r\n        pause() {\r\n            this.paused = true;\r\n        }\r\n    };\r\n}\r\nfunction BaseRRTextImpl(RRNodeClass) {\r\n    return class BaseRRText extends RRNodeClass {\r\n        constructor(data) {\r\n            super();\r\n            this.nodeType = NodeType.TEXT_NODE;\r\n            this.nodeName = '#text';\r\n            this.RRNodeType = NodeType$1.Text;\r\n            this.data = data;\r\n        }\r\n        get textContent() {\r\n            return this.data;\r\n        }\r\n        set textContent(textContent) {\r\n            this.data = textContent;\r\n        }\r\n        toString() {\r\n            return `RRText text=${JSON.stringify(this.data)}`;\r\n        }\r\n    };\r\n}\r\nfunction BaseRRCommentImpl(RRNodeClass) {\r\n    return class BaseRRComment extends RRNodeClass {\r\n        constructor(data) {\r\n            super();\r\n            this.nodeType = NodeType.COMMENT_NODE;\r\n            this.nodeName = '#comment';\r\n            this.RRNodeType = NodeType$1.Comment;\r\n            this.data = data;\r\n        }\r\n        get textContent() {\r\n            return this.data;\r\n        }\r\n        set textContent(textContent) {\r\n            this.data = textContent;\r\n        }\r\n        toString() {\r\n            return `RRComment text=${JSON.stringify(this.data)}`;\r\n        }\r\n    };\r\n}\r\nfunction BaseRRCDATASectionImpl(RRNodeClass) {\r\n    return class BaseRRCDATASection extends RRNodeClass {\r\n        constructor(data) {\r\n            super();\r\n            this.nodeName = '#cdata-section';\r\n            this.nodeType = NodeType.CDATA_SECTION_NODE;\r\n            this.RRNodeType = NodeType$1.CDATA;\r\n            this.data = data;\r\n        }\r\n        get textContent() {\r\n            return this.data;\r\n        }\r\n        set textContent(textContent) {\r\n            this.data = textContent;\r\n        }\r\n        toString() {\r\n            return `RRCDATASection data=${JSON.stringify(this.data)}`;\r\n        }\r\n    };\r\n}\r\nclass ClassList {\r\n    constructor(classText, onChange) {\r\n        this.classes = [];\r\n        this.add = (...classNames) => {\r\n            for (const item of classNames) {\r\n                const className = String(item);\r\n                if (this.classes.indexOf(className) >= 0)\r\n                    continue;\r\n                this.classes.push(className);\r\n            }\r\n            this.onChange && this.onChange(this.classes.join(' '));\r\n        };\r\n        this.remove = (...classNames) => {\r\n            this.classes = this.classes.filter((item) => classNames.indexOf(item) === -1);\r\n            this.onChange && this.onChange(this.classes.join(' '));\r\n        };\r\n        if (classText) {\r\n            const classes = classText.trim().split(/\\s+/);\r\n            this.classes.push(...classes);\r\n        }\r\n        this.onChange = onChange;\r\n    }\r\n}\r\nvar NodeType;\r\n(function (NodeType) {\r\n    NodeType[NodeType[\"PLACEHOLDER\"] = 0] = \"PLACEHOLDER\";\r\n    NodeType[NodeType[\"ELEMENT_NODE\"] = 1] = \"ELEMENT_NODE\";\r\n    NodeType[NodeType[\"ATTRIBUTE_NODE\"] = 2] = \"ATTRIBUTE_NODE\";\r\n    NodeType[NodeType[\"TEXT_NODE\"] = 3] = \"TEXT_NODE\";\r\n    NodeType[NodeType[\"CDATA_SECTION_NODE\"] = 4] = \"CDATA_SECTION_NODE\";\r\n    NodeType[NodeType[\"ENTITY_REFERENCE_NODE\"] = 5] = \"ENTITY_REFERENCE_NODE\";\r\n    NodeType[NodeType[\"ENTITY_NODE\"] = 6] = \"ENTITY_NODE\";\r\n    NodeType[NodeType[\"PROCESSING_INSTRUCTION_NODE\"] = 7] = \"PROCESSING_INSTRUCTION_NODE\";\r\n    NodeType[NodeType[\"COMMENT_NODE\"] = 8] = \"COMMENT_NODE\";\r\n    NodeType[NodeType[\"DOCUMENT_NODE\"] = 9] = \"DOCUMENT_NODE\";\r\n    NodeType[NodeType[\"DOCUMENT_TYPE_NODE\"] = 10] = \"DOCUMENT_TYPE_NODE\";\r\n    NodeType[NodeType[\"DOCUMENT_FRAGMENT_NODE\"] = 11] = \"DOCUMENT_FRAGMENT_NODE\";\r\n})(NodeType || (NodeType = {}));\n\nconst NAMESPACES = {\r\n    svg: 'http://www.w3.org/2000/svg',\r\n    'xlink:href': 'http://www.w3.org/1999/xlink',\r\n    xmlns: 'http://www.w3.org/2000/xmlns/',\r\n};\r\nconst SVGTagMap = {\r\n    altglyph: 'altGlyph',\r\n    altglyphdef: 'altGlyphDef',\r\n    altglyphitem: 'altGlyphItem',\r\n    animatecolor: 'animateColor',\r\n    animatemotion: 'animateMotion',\r\n    animatetransform: 'animateTransform',\r\n    clippath: 'clipPath',\r\n    feblend: 'feBlend',\r\n    fecolormatrix: 'feColorMatrix',\r\n    fecomponenttransfer: 'feComponentTransfer',\r\n    fecomposite: 'feComposite',\r\n    feconvolvematrix: 'feConvolveMatrix',\r\n    fediffuselighting: 'feDiffuseLighting',\r\n    fedisplacementmap: 'feDisplacementMap',\r\n    fedistantlight: 'feDistantLight',\r\n    fedropshadow: 'feDropShadow',\r\n    feflood: 'feFlood',\r\n    fefunca: 'feFuncA',\r\n    fefuncb: 'feFuncB',\r\n    fefuncg: 'feFuncG',\r\n    fefuncr: 'feFuncR',\r\n    fegaussianblur: 'feGaussianBlur',\r\n    feimage: 'feImage',\r\n    femerge: 'feMerge',\r\n    femergenode: 'feMergeNode',\r\n    femorphology: 'feMorphology',\r\n    feoffset: 'feOffset',\r\n    fepointlight: 'fePointLight',\r\n    fespecularlighting: 'feSpecularLighting',\r\n    fespotlight: 'feSpotLight',\r\n    fetile: 'feTile',\r\n    feturbulence: 'feTurbulence',\r\n    foreignobject: 'foreignObject',\r\n    glyphref: 'glyphRef',\r\n    lineargradient: 'linearGradient',\r\n    radialgradient: 'radialGradient',\r\n};\r\nfunction diff(oldTree, newTree, replayer, rrnodeMirror) {\r\n    const oldChildren = oldTree.childNodes;\r\n    const newChildren = newTree.childNodes;\r\n    rrnodeMirror =\r\n        rrnodeMirror ||\r\n            newTree.mirror ||\r\n            newTree.ownerDocument.mirror;\r\n    if (oldChildren.length > 0 || newChildren.length > 0) {\r\n        diffChildren(Array.from(oldChildren), newChildren, oldTree, replayer, rrnodeMirror);\r\n    }\r\n    let inputDataToApply = null, scrollDataToApply = null;\r\n    switch (newTree.RRNodeType) {\r\n        case NodeType$1.Document: {\r\n            const newRRDocument = newTree;\r\n            scrollDataToApply = newRRDocument.scrollData;\r\n            break;\r\n        }\r\n        case NodeType$1.Element: {\r\n            const oldElement = oldTree;\r\n            const newRRElement = newTree;\r\n            diffProps(oldElement, newRRElement, rrnodeMirror);\r\n            scrollDataToApply = newRRElement.scrollData;\r\n            inputDataToApply = newRRElement.inputData;\r\n            switch (newRRElement.tagName) {\r\n                case 'AUDIO':\r\n                case 'VIDEO': {\r\n                    const oldMediaElement = oldTree;\r\n                    const newMediaRRElement = newRRElement;\r\n                    if (newMediaRRElement.paused !== undefined)\r\n                        newMediaRRElement.paused\r\n                            ? void oldMediaElement.pause()\r\n                            : void oldMediaElement.play();\r\n                    if (newMediaRRElement.muted !== undefined)\r\n                        oldMediaElement.muted = newMediaRRElement.muted;\r\n                    if (newMediaRRElement.volume !== undefined)\r\n                        oldMediaElement.volume = newMediaRRElement.volume;\r\n                    if (newMediaRRElement.currentTime !== undefined)\r\n                        oldMediaElement.currentTime = newMediaRRElement.currentTime;\r\n                    if (newMediaRRElement.playbackRate !== undefined)\r\n                        oldMediaElement.playbackRate = newMediaRRElement.playbackRate;\r\n                    break;\r\n                }\r\n                case 'CANVAS':\r\n                    {\r\n                        const rrCanvasElement = newTree;\r\n                        if (rrCanvasElement.rr_dataURL !== null) {\r\n                            const image = document.createElement('img');\r\n                            image.onload = () => {\r\n                                const ctx = oldElement.getContext('2d');\r\n                                if (ctx) {\r\n                                    ctx.drawImage(image, 0, 0, image.width, image.height);\r\n                                }\r\n                            };\r\n                            image.src = rrCanvasElement.rr_dataURL;\r\n                        }\r\n                        rrCanvasElement.canvasMutations.forEach((canvasMutation) => replayer.applyCanvas(canvasMutation.event, canvasMutation.mutation, oldTree));\r\n                    }\r\n                    break;\r\n                case 'STYLE':\r\n                    {\r\n                        const styleSheet = oldElement.sheet;\r\n                        styleSheet &&\r\n                            newTree.rules.forEach((data) => replayer.applyStyleSheetMutation(data, styleSheet));\r\n                    }\r\n                    break;\r\n            }\r\n            if (newRRElement.shadowRoot) {\r\n                if (!oldElement.shadowRoot)\r\n                    oldElement.attachShadow({ mode: 'open' });\r\n                const oldChildren = oldElement.shadowRoot.childNodes;\r\n                const newChildren = newRRElement.shadowRoot.childNodes;\r\n                if (oldChildren.length > 0 || newChildren.length > 0)\r\n                    diffChildren(Array.from(oldChildren), newChildren, oldElement.shadowRoot, replayer, rrnodeMirror);\r\n            }\r\n            break;\r\n        }\r\n        case NodeType$1.Text:\r\n        case NodeType$1.Comment:\r\n        case NodeType$1.CDATA:\r\n            if (oldTree.textContent !==\r\n                newTree.data)\r\n                oldTree.textContent = newTree.data;\r\n            break;\r\n    }\r\n    scrollDataToApply && replayer.applyScroll(scrollDataToApply, true);\r\n    inputDataToApply && replayer.applyInput(inputDataToApply);\r\n    if (newTree.nodeName === 'IFRAME') {\r\n        const oldContentDocument = oldTree.contentDocument;\r\n        const newIFrameElement = newTree;\r\n        if (oldContentDocument) {\r\n            const sn = rrnodeMirror.getMeta(newIFrameElement.contentDocument);\r\n            if (sn) {\r\n                replayer.mirror.add(oldContentDocument, Object.assign({}, sn));\r\n            }\r\n            diff(oldContentDocument, newIFrameElement.contentDocument, replayer, rrnodeMirror);\r\n        }\r\n    }\r\n}\r\nfunction diffProps(oldTree, newTree, rrnodeMirror) {\r\n    const oldAttributes = oldTree.attributes;\r\n    const newAttributes = newTree.attributes;\r\n    for (const name in newAttributes) {\r\n        const newValue = newAttributes[name];\r\n        const sn = rrnodeMirror.getMeta(newTree);\r\n        if (sn && 'isSVG' in sn && sn.isSVG && NAMESPACES[name])\r\n            oldTree.setAttributeNS(NAMESPACES[name], name, newValue);\r\n        else if (newTree.tagName === 'CANVAS' && name === 'rr_dataURL') {\r\n            const image = document.createElement('img');\r\n            image.src = newValue;\r\n            image.onload = () => {\r\n                const ctx = oldTree.getContext('2d');\r\n                if (ctx) {\r\n                    ctx.drawImage(image, 0, 0, image.width, image.height);\r\n                }\r\n            };\r\n        }\r\n        else\r\n            oldTree.setAttribute(name, newValue);\r\n    }\r\n    for (const { name } of Array.from(oldAttributes))\r\n        if (!(name in newAttributes))\r\n            oldTree.removeAttribute(name);\r\n    newTree.scrollLeft && (oldTree.scrollLeft = newTree.scrollLeft);\r\n    newTree.scrollTop && (oldTree.scrollTop = newTree.scrollTop);\r\n}\r\nfunction diffChildren(oldChildren, newChildren, parentNode, replayer, rrnodeMirror) {\r\n    var _a;\r\n    let oldStartIndex = 0, oldEndIndex = oldChildren.length - 1, newStartIndex = 0, newEndIndex = newChildren.length - 1;\r\n    let oldStartNode = oldChildren[oldStartIndex], oldEndNode = oldChildren[oldEndIndex], newStartNode = newChildren[newStartIndex], newEndNode = newChildren[newEndIndex];\r\n    let oldIdToIndex = undefined, indexInOld;\r\n    while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\r\n        const oldStartId = replayer.mirror.getId(oldStartNode);\r\n        const oldEndId = replayer.mirror.getId(oldEndNode);\r\n        const newStartId = rrnodeMirror.getId(newStartNode);\r\n        const newEndId = rrnodeMirror.getId(newEndNode);\r\n        if (oldStartNode === undefined) {\r\n            oldStartNode = oldChildren[++oldStartIndex];\r\n        }\r\n        else if (oldEndNode === undefined) {\r\n            oldEndNode = oldChildren[--oldEndIndex];\r\n        }\r\n        else if (oldStartId !== -1 &&\r\n            oldStartId === newStartId) {\r\n            diff(oldStartNode, newStartNode, replayer, rrnodeMirror);\r\n            oldStartNode = oldChildren[++oldStartIndex];\r\n            newStartNode = newChildren[++newStartIndex];\r\n        }\r\n        else if (oldEndId !== -1 &&\r\n            oldEndId === newEndId) {\r\n            diff(oldEndNode, newEndNode, replayer, rrnodeMirror);\r\n            oldEndNode = oldChildren[--oldEndIndex];\r\n            newEndNode = newChildren[--newEndIndex];\r\n        }\r\n        else if (oldStartId !== -1 &&\r\n            oldStartId === newEndId) {\r\n            parentNode.insertBefore(oldStartNode, oldEndNode.nextSibling);\r\n            diff(oldStartNode, newEndNode, replayer, rrnodeMirror);\r\n            oldStartNode = oldChildren[++oldStartIndex];\r\n            newEndNode = newChildren[--newEndIndex];\r\n        }\r\n        else if (oldEndId !== -1 &&\r\n            oldEndId === newStartId) {\r\n            parentNode.insertBefore(oldEndNode, oldStartNode);\r\n            diff(oldEndNode, newStartNode, replayer, rrnodeMirror);\r\n            oldEndNode = oldChildren[--oldEndIndex];\r\n            newStartNode = newChildren[++newStartIndex];\r\n        }\r\n        else {\r\n            if (!oldIdToIndex) {\r\n                oldIdToIndex = {};\r\n                for (let i = oldStartIndex; i <= oldEndIndex; i++) {\r\n                    const oldChild = oldChildren[i];\r\n                    if (oldChild && replayer.mirror.hasNode(oldChild))\r\n                        oldIdToIndex[replayer.mirror.getId(oldChild)] = i;\r\n                }\r\n            }\r\n            indexInOld = oldIdToIndex[rrnodeMirror.getId(newStartNode)];\r\n            if (indexInOld) {\r\n                const nodeToMove = oldChildren[indexInOld];\r\n                parentNode.insertBefore(nodeToMove, oldStartNode);\r\n                diff(nodeToMove, newStartNode, replayer, rrnodeMirror);\r\n                oldChildren[indexInOld] = undefined;\r\n            }\r\n            else {\r\n                const newNode = createOrGetNode(newStartNode, replayer.mirror, rrnodeMirror);\r\n                if (parentNode.nodeName === '#document' &&\r\n                    ((_a = replayer.mirror.getMeta(newNode)) === null || _a === void 0 ? void 0 : _a.type) === NodeType$1.Element &&\r\n                    parentNode.documentElement) {\r\n                    parentNode.removeChild(parentNode.documentElement);\r\n                    oldChildren[oldStartIndex] = undefined;\r\n                    oldStartNode = undefined;\r\n                }\r\n                parentNode.insertBefore(newNode, oldStartNode || null);\r\n                diff(newNode, newStartNode, replayer, rrnodeMirror);\r\n            }\r\n            newStartNode = newChildren[++newStartIndex];\r\n        }\r\n    }\r\n    if (oldStartIndex > oldEndIndex) {\r\n        const referenceRRNode = newChildren[newEndIndex + 1];\r\n        let referenceNode = null;\r\n        if (referenceRRNode)\r\n            parentNode.childNodes.forEach((child) => {\r\n                if (replayer.mirror.getId(child) === rrnodeMirror.getId(referenceRRNode))\r\n                    referenceNode = child;\r\n            });\r\n        for (; newStartIndex <= newEndIndex; ++newStartIndex) {\r\n            const newNode = createOrGetNode(newChildren[newStartIndex], replayer.mirror, rrnodeMirror);\r\n            parentNode.insertBefore(newNode, referenceNode);\r\n            diff(newNode, newChildren[newStartIndex], replayer, rrnodeMirror);\r\n        }\r\n    }\r\n    else if (newStartIndex > newEndIndex) {\r\n        for (; oldStartIndex <= oldEndIndex; oldStartIndex++) {\r\n            const node = oldChildren[oldStartIndex];\r\n            if (node) {\r\n                parentNode.removeChild(node);\r\n                replayer.mirror.removeNodeFromMap(node);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction createOrGetNode(rrNode, domMirror, rrnodeMirror) {\r\n    const nodeId = rrnodeMirror.getId(rrNode);\r\n    const sn = rrnodeMirror.getMeta(rrNode);\r\n    let node = null;\r\n    if (nodeId > -1)\r\n        node = domMirror.getNode(nodeId);\r\n    if (node !== null)\r\n        return node;\r\n    switch (rrNode.RRNodeType) {\r\n        case NodeType$1.Document:\r\n            node = new Document();\r\n            break;\r\n        case NodeType$1.DocumentType:\r\n            node = document.implementation.createDocumentType(rrNode.name, rrNode.publicId, rrNode.systemId);\r\n            break;\r\n        case NodeType$1.Element: {\r\n            let tagName = rrNode.tagName.toLowerCase();\r\n            tagName = SVGTagMap[tagName] || tagName;\r\n            if (sn && 'isSVG' in sn && (sn === null || sn === void 0 ? void 0 : sn.isSVG)) {\r\n                node = document.createElementNS(NAMESPACES['svg'], tagName);\r\n            }\r\n            else\r\n                node = document.createElement(rrNode.tagName);\r\n            break;\r\n        }\r\n        case NodeType$1.Text:\r\n            node = document.createTextNode(rrNode.data);\r\n            break;\r\n        case NodeType$1.Comment:\r\n            node = document.createComment(rrNode.data);\r\n            break;\r\n        case NodeType$1.CDATA:\r\n            node = document.createCDATASection(rrNode.data);\r\n            break;\r\n    }\r\n    if (sn)\r\n        domMirror.add(node, Object.assign({}, sn));\r\n    return node;\r\n}\n\nclass RRDocument extends BaseRRDocumentImpl(BaseRRNode) {\r\n    constructor(mirror) {\r\n        super();\r\n        this.UNSERIALIZED_STARTING_ID = -2;\r\n        this._unserializedId = this.UNSERIALIZED_STARTING_ID;\r\n        this.mirror = createMirror();\r\n        this.scrollData = null;\r\n        if (mirror) {\r\n            this.mirror = mirror;\r\n        }\r\n    }\r\n    get unserializedId() {\r\n        return this._unserializedId--;\r\n    }\r\n    createDocument(_namespace, _qualifiedName, _doctype) {\r\n        return new RRDocument();\r\n    }\r\n    createDocumentType(qualifiedName, publicId, systemId) {\r\n        const documentTypeNode = new RRDocumentType(qualifiedName, publicId, systemId);\r\n        documentTypeNode.ownerDocument = this;\r\n        return documentTypeNode;\r\n    }\r\n    createElement(tagName) {\r\n        const upperTagName = tagName.toUpperCase();\r\n        let element;\r\n        switch (upperTagName) {\r\n            case 'AUDIO':\r\n            case 'VIDEO':\r\n                element = new RRMediaElement(upperTagName);\r\n                break;\r\n            case 'IFRAME':\r\n                element = new RRIFrameElement(upperTagName, this.mirror);\r\n                break;\r\n            case 'CANVAS':\r\n                element = new RRCanvasElement(upperTagName);\r\n                break;\r\n            case 'STYLE':\r\n                element = new RRStyleElement(upperTagName);\r\n                break;\r\n            default:\r\n                element = new RRElement(upperTagName);\r\n                break;\r\n        }\r\n        element.ownerDocument = this;\r\n        return element;\r\n    }\r\n    createComment(data) {\r\n        const commentNode = new RRComment(data);\r\n        commentNode.ownerDocument = this;\r\n        return commentNode;\r\n    }\r\n    createCDATASection(data) {\r\n        const sectionNode = new RRCDATASection(data);\r\n        sectionNode.ownerDocument = this;\r\n        return sectionNode;\r\n    }\r\n    createTextNode(data) {\r\n        const textNode = new RRText(data);\r\n        textNode.ownerDocument = this;\r\n        return textNode;\r\n    }\r\n    destroyTree() {\r\n        this.childNodes = [];\r\n        this.mirror.reset();\r\n    }\r\n    open() {\r\n        super.open();\r\n        this._unserializedId = this.UNSERIALIZED_STARTING_ID;\r\n    }\r\n}\r\nconst RRDocumentType = BaseRRDocumentTypeImpl(BaseRRNode);\r\nclass RRElement extends BaseRRElementImpl(BaseRRNode) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.inputData = null;\r\n        this.scrollData = null;\r\n    }\r\n}\r\nclass RRMediaElement extends BaseRRMediaElementImpl(RRElement) {\r\n}\r\nclass RRCanvasElement extends RRElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.rr_dataURL = null;\r\n        this.canvasMutations = [];\r\n    }\r\n    getContext() {\r\n        return null;\r\n    }\r\n}\r\nclass RRStyleElement extends RRElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.rules = [];\r\n    }\r\n}\r\nclass RRIFrameElement extends RRElement {\r\n    constructor(upperTagName, mirror) {\r\n        super(upperTagName);\r\n        this.contentDocument = new RRDocument();\r\n        this.contentDocument.mirror = mirror;\r\n    }\r\n}\r\nconst RRText = BaseRRTextImpl(BaseRRNode);\r\nconst RRComment = BaseRRCommentImpl(BaseRRNode);\r\nconst RRCDATASection = BaseRRCDATASectionImpl(BaseRRNode);\r\nfunction getValidTagName(element) {\r\n    if (element instanceof HTMLFormElement) {\r\n        return 'FORM';\r\n    }\r\n    return element.tagName.toUpperCase();\r\n}\r\nfunction buildFromNode(node, rrdom, domMirror, parentRRNode) {\r\n    let rrNode;\r\n    switch (node.nodeType) {\r\n        case NodeType.DOCUMENT_NODE:\r\n            if (parentRRNode && parentRRNode.nodeName === 'IFRAME')\r\n                rrNode = parentRRNode.contentDocument;\r\n            else {\r\n                rrNode = rrdom;\r\n                rrNode.compatMode = node.compatMode;\r\n            }\r\n            break;\r\n        case NodeType.DOCUMENT_TYPE_NODE: {\r\n            const documentType = node;\r\n            rrNode = rrdom.createDocumentType(documentType.name, documentType.publicId, documentType.systemId);\r\n            break;\r\n        }\r\n        case NodeType.ELEMENT_NODE: {\r\n            const elementNode = node;\r\n            const tagName = getValidTagName(elementNode);\r\n            rrNode = rrdom.createElement(tagName);\r\n            const rrElement = rrNode;\r\n            for (const { name, value } of Array.from(elementNode.attributes)) {\r\n                rrElement.attributes[name] = value;\r\n            }\r\n            elementNode.scrollLeft && (rrElement.scrollLeft = elementNode.scrollLeft);\r\n            elementNode.scrollTop && (rrElement.scrollTop = elementNode.scrollTop);\r\n            break;\r\n        }\r\n        case NodeType.TEXT_NODE:\r\n            rrNode = rrdom.createTextNode(node.textContent || '');\r\n            break;\r\n        case NodeType.CDATA_SECTION_NODE:\r\n            rrNode = rrdom.createCDATASection(node.data);\r\n            break;\r\n        case NodeType.COMMENT_NODE:\r\n            rrNode = rrdom.createComment(node.textContent || '');\r\n            break;\r\n        case NodeType.DOCUMENT_FRAGMENT_NODE:\r\n            rrNode = parentRRNode.attachShadow({ mode: 'open' });\r\n            break;\r\n        default:\r\n            return null;\r\n    }\r\n    let sn = domMirror.getMeta(node);\r\n    if (rrdom instanceof RRDocument) {\r\n        if (!sn) {\r\n            sn = getDefaultSN(rrNode, rrdom.unserializedId);\r\n            domMirror.add(node, sn);\r\n        }\r\n        rrdom.mirror.add(rrNode, Object.assign({}, sn));\r\n    }\r\n    return rrNode;\r\n}\r\nfunction buildFromDom(dom, domMirror = createMirror$1(), rrdom = new RRDocument()) {\r\n    function walk(node, parentRRNode) {\r\n        const rrNode = buildFromNode(node, rrdom, domMirror, parentRRNode);\r\n        if (rrNode === null)\r\n            return;\r\n        if ((parentRRNode === null || parentRRNode === void 0 ? void 0 : parentRRNode.nodeName) !== 'IFRAME' &&\r\n            node.nodeType !== NodeType.DOCUMENT_FRAGMENT_NODE) {\r\n            parentRRNode === null || parentRRNode === void 0 ? void 0 : parentRRNode.appendChild(rrNode);\r\n            rrNode.parentNode = parentRRNode;\r\n            rrNode.parentElement = parentRRNode;\r\n        }\r\n        if (node.nodeName === 'IFRAME') {\r\n            const iframeDoc = node.contentDocument;\r\n            iframeDoc && walk(iframeDoc, rrNode);\r\n        }\r\n        else if (node.nodeType === NodeType.DOCUMENT_NODE ||\r\n            node.nodeType === NodeType.ELEMENT_NODE ||\r\n            node.nodeType === NodeType.DOCUMENT_FRAGMENT_NODE) {\r\n            if (node.nodeType === NodeType.ELEMENT_NODE &&\r\n                node.shadowRoot)\r\n                walk(node.shadowRoot, rrNode);\r\n            node.childNodes.forEach((childNode) => walk(childNode, rrNode));\r\n        }\r\n    }\r\n    walk(dom, null);\r\n    return rrdom;\r\n}\r\nfunction createMirror() {\r\n    return new Mirror();\r\n}\r\nclass Mirror {\r\n    constructor() {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    }\r\n    getId(n) {\r\n        var _a;\r\n        if (!n)\r\n            return -1;\r\n        const id = (_a = this.getMeta(n)) === null || _a === void 0 ? void 0 : _a.id;\r\n        return id !== null && id !== void 0 ? id : -1;\r\n    }\r\n    getNode(id) {\r\n        return this.idNodeMap.get(id) || null;\r\n    }\r\n    getIds() {\r\n        return Array.from(this.idNodeMap.keys());\r\n    }\r\n    getMeta(n) {\r\n        return this.nodeMetaMap.get(n) || null;\r\n    }\r\n    removeNodeFromMap(n) {\r\n        const id = this.getId(n);\r\n        this.idNodeMap.delete(id);\r\n        if (n.childNodes) {\r\n            n.childNodes.forEach((childNode) => this.removeNodeFromMap(childNode));\r\n        }\r\n    }\r\n    has(id) {\r\n        return this.idNodeMap.has(id);\r\n    }\r\n    hasNode(node) {\r\n        return this.nodeMetaMap.has(node);\r\n    }\r\n    add(n, meta) {\r\n        const id = meta.id;\r\n        this.idNodeMap.set(id, n);\r\n        this.nodeMetaMap.set(n, meta);\r\n    }\r\n    replace(id, n) {\r\n        const oldNode = this.getNode(id);\r\n        if (oldNode) {\r\n            const meta = this.nodeMetaMap.get(oldNode);\r\n            if (meta)\r\n                this.nodeMetaMap.set(n, meta);\r\n        }\r\n        this.idNodeMap.set(id, n);\r\n    }\r\n    reset() {\r\n        this.idNodeMap = new Map();\r\n        this.nodeMetaMap = new WeakMap();\r\n    }\r\n}\r\nfunction getDefaultSN(node, id) {\r\n    switch (node.RRNodeType) {\r\n        case NodeType$1.Document:\r\n            return {\r\n                id,\r\n                type: node.RRNodeType,\r\n                childNodes: [],\r\n            };\r\n        case NodeType$1.DocumentType: {\r\n            const doctype = node;\r\n            return {\r\n                id,\r\n                type: node.RRNodeType,\r\n                name: doctype.name,\r\n                publicId: doctype.publicId,\r\n                systemId: doctype.systemId,\r\n            };\r\n        }\r\n        case NodeType$1.Element:\r\n            return {\r\n                id,\r\n                type: node.RRNodeType,\r\n                tagName: node.tagName.toLowerCase(),\r\n                attributes: {},\r\n                childNodes: [],\r\n            };\r\n        case NodeType$1.Text:\r\n            return {\r\n                id,\r\n                type: node.RRNodeType,\r\n                textContent: node.textContent || '',\r\n            };\r\n        case NodeType$1.Comment:\r\n            return {\r\n                id,\r\n                type: node.RRNodeType,\r\n                textContent: node.textContent || '',\r\n            };\r\n        case NodeType$1.CDATA:\r\n            return {\r\n                id,\r\n                type: node.RRNodeType,\r\n                textContent: '',\r\n            };\r\n    }\r\n}\n\nexport { BaseRRCDATASectionImpl, BaseRRCommentImpl, BaseRRDocumentImpl, BaseRRDocumentTypeImpl, BaseRRElementImpl, BaseRRMediaElementImpl, BaseRRNode, BaseRRTextImpl, ClassList, Mirror, NodeType, RRCDATASection, RRCanvasElement, RRComment, RRDocument, RRDocumentType, RRElement, RRIFrameElement, RRMediaElement, BaseRRNode as RRNode, RRStyleElement, RRText, buildFromDom, buildFromNode, createMirror, createOrGetNode, diff, getDefaultSN };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}