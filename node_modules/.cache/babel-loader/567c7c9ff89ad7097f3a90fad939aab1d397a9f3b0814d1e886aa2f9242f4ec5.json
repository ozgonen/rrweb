{"ast":null,"code":"// RecordingCutter.js - Utility for cutting rrweb recordings into smaller clips\n\n/**\n * Converts relative seconds to absolute timestamp\n * @param {Array} events - rrweb events array\n * @param {number} relativeSeconds - Seconds from start of recording\n * @returns {number} Absolute timestamp\n */\nexport function relativeTimeToTimestamp(events, relativeSeconds) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return startTime + relativeSeconds * 1000;\n}\n\n/**\n * Converts absolute timestamp to relative seconds\n * @param {Array} events - rrweb events array\n * @param {number} timestamp - Absolute timestamp\n * @returns {number} Relative seconds from start\n */\nexport function timestampToRelativeTime(events, timestamp) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return (timestamp - startTime) / 1000;\n}\n\n/**\n * Formats seconds as MM:SS or HH:MM:SS\n * @param {number} seconds - Total seconds\n * @returns {string} Formatted time string\n */\nexport function formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const secs = Math.floor(seconds % 60);\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  }\n  return `${minutes}:${secs.toString().padStart(2, \"0\")}`;\n}\n\n/**\n * Parses time string (MM:SS, HH:MM:SS, or just seconds) to total seconds\n * @param {string} timeStr - Time string like \"1:30\", \"0:05\", \"90\", etc.\n * @returns {number} Total seconds\n */\nexport function parseTimeString(timeStr) {\n  if (!timeStr) return 0;\n\n  // If it's just a number, treat as seconds\n  if (/^\\d+$/.test(timeStr)) {\n    return parseInt(timeStr);\n  }\n\n  // Parse MM:SS or HH:MM:SS format\n  const parts = timeStr.split(\":\").map(Number);\n  if (parts.length === 2) {\n    // MM:SS\n    return parts[0] * 60 + parts[1];\n  } else if (parts.length === 3) {\n    // HH:MM:SS\n    return parts[0] * 3600 + parts[1] * 60 + parts[2];\n  }\n  return 0;\n}\n\n/**\n * Creates a synthetic full snapshot by applying all incremental changes\n * up to a specific timestamp\n * @param {Array} events - Original rrweb events array\n * @param {Object} baseSnapshot - The base full snapshot to start from\n * @param {number} targetTimestamp - The timestamp to build the DOM state up to\n * @returns {Object} Synthetic full snapshot representing the DOM state at targetTimestamp\n */\nfunction createSyntheticSnapshot(events, baseSnapshot, targetTimestamp) {\n  // For now, let's use a simplified approach\n  // We'll just return the base snapshot with adjusted timing\n  // In the future, this could be enhanced to actually merge DOM changes\n  console.log(`Creating synthetic snapshot at ${targetTimestamp} from base at ${baseSnapshot.timestamp}`);\n  return {\n    ...baseSnapshot,\n    timestamp: targetTimestamp\n  };\n}\n\n/**\n * Cuts an rrweb recording to show only events within a specific time range\n * @param {Array} events - Original rrweb events array\n * @param {number} centerTimeSeconds - Relative time in seconds from start of recording\n * @param {number} beforeSeconds - Seconds to include before the center time (default: 5)\n * @param {number} afterSeconds - Seconds to include after the center time (default: 5)\n * @returns {Array} New rrweb events array for the clipped recording\n */\nexport function cutRecording(events, centerTimeSeconds, beforeSeconds = 5, afterSeconds = 5) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    throw new Error(\"Invalid events array provided\");\n  }\n\n  // Convert relative time to absolute timestamp\n  const centerTimestamp = relativeTimeToTimestamp(events, centerTimeSeconds);\n  const beforeMs = beforeSeconds * 1000;\n  const afterMs = afterSeconds * 1000;\n  const startTime = centerTimestamp - beforeMs;\n  const endTime = centerTimestamp + afterMs;\n  console.log(`Cutting recording around ${formatTime(centerTimeSeconds)} (${centerTimeSeconds}s)`);\n  console.log(`Time range: ${formatTime(centerTimeSeconds - beforeSeconds)} to ${formatTime(centerTimeSeconds + afterSeconds)}`);\n\n  // Find the full snapshot (type 2) that's closest to but before our start time\n  let fullSnapshot = null;\n  let fullSnapshotTime = 0;\n  for (const event of events) {\n    if (event.type === 2 && event.timestamp <= startTime) {\n      if (!fullSnapshot || event.timestamp > fullSnapshotTime) {\n        fullSnapshot = event;\n        fullSnapshotTime = event.timestamp;\n      }\n    }\n  }\n\n  // If no full snapshot found before start time, use the first one\n  if (!fullSnapshot) {\n    fullSnapshot = events.find(event => event.type === 2);\n    if (!fullSnapshot) {\n      throw new Error(\"No full snapshot found in recording\");\n    }\n  }\n\n  // Create a synthetic full snapshot by applying all changes up to startTime\n  const syntheticSnapshot = createSyntheticSnapshot(events, fullSnapshot, startTime);\n\n  // Filter events within our time range (after the start time)\n  const clippedEvents = events.filter(event => {\n    return event.timestamp >= startTime && event.timestamp <= endTime;\n  });\n\n  // If we don't have enough events, expand the range to get at least 1 more event\n  let finalEvents = clippedEvents;\n  if (clippedEvents.length === 0) {\n    // No events in range, find the next event after startTime\n    const nextEvent = events.find(event => event.timestamp > startTime);\n    if (nextEvent) {\n      finalEvents = [nextEvent];\n    } else {\n      // No events after startTime, find the previous event\n      const prevEvents = events.filter(event => event.timestamp < startTime);\n      if (prevEvents.length > 0) {\n        finalEvents = [prevEvents[prevEvents.length - 1]];\n      }\n    }\n  }\n\n  // Create the new events array\n  const newEvents = [];\n\n  // Add the synthetic full snapshot at the start time\n  newEvents.push({\n    ...syntheticSnapshot,\n    timestamp: startTime\n  });\n\n  // Add all events in our clip range\n  for (const event of finalEvents) {\n    newEvents.push({\n      ...event,\n      timestamp: event.timestamp\n    });\n  }\n\n  // Ensure we have at least 2 events total\n  if (newEvents.length < 2) {\n    // Add a dummy event if we still don't have enough\n    const lastTimestamp = newEvents[newEvents.length - 1].timestamp;\n    newEvents.push({\n      type: 4,\n      // Meta event\n      data: {\n        href: window.location.href\n      },\n      timestamp: lastTimestamp + 100\n    });\n  }\n\n  // Sort by timestamp to ensure proper order\n  newEvents.sort((a, b) => a.timestamp - b.timestamp);\n  console.log(`Original recording: ${events.length} events`);\n  console.log(`Clipped recording: ${newEvents.length} events`);\n  console.log(`Time span: ${beforeSeconds + afterSeconds} seconds`);\n  return newEvents;\n}\n\n/**\n * Finds all events of a specific type within a recording\n * @param {Array} events - rrweb events array\n * @param {number} eventType - Event type to search for (1=DOM, 2=FullSnapshot, 3=IncrementalSnapshot, etc.)\n * @returns {Array} Array of events matching the type\n */\nexport function findEventsByType(events, eventType) {\n  return events.filter(event => event.type === eventType);\n}\n\n/**\n * Finds events containing specific text or attributes\n * @param {Array} events - rrweb events array\n * @param {string} searchTerm - Text to search for\n * @returns {Array} Array of events containing the search term\n */\nexport function findEventsByContent(events, searchTerm) {\n  const matchingEvents = [];\n  for (const event of events) {\n    const eventStr = JSON.stringify(event).toLowerCase();\n    if (eventStr.includes(searchTerm.toLowerCase())) {\n      matchingEvents.push(event);\n    }\n  }\n  return matchingEvents;\n}\n\n/**\n * Analyzes a recording and provides statistics\n * @param {Array} events - rrweb events array\n * @returns {Object} Recording statistics\n */\nexport function analyzeRecording(events) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    return null;\n  }\n  const firstTimestamp = events[0].timestamp;\n  const lastTimestamp = events[events.length - 1].timestamp;\n  const duration = (lastTimestamp - firstTimestamp) / 1000; // in seconds\n\n  const eventTypeCounts = {};\n  for (const event of events) {\n    eventTypeCounts[event.type] = (eventTypeCounts[event.type] || 0) + 1;\n  }\n  return {\n    totalEvents: events.length,\n    duration: duration,\n    startTime: firstTimestamp,\n    endTime: lastTimestamp,\n    eventTypeCounts: eventTypeCounts,\n    eventTypes: {\n      1: \"DomContentLoaded\",\n      2: \"FullSnapshot\",\n      3: \"IncrementalSnapshot\",\n      4: \"Meta\",\n      5: \"Custom\",\n      6: \"Plugin\"\n    }\n  };\n}\n\n/**\n * Creates multiple clips around specified timestamps\n * @param {Array} events - Original rrweb events array\n * @param {Array} timestamps - Array of timestamps to create clips around\n * @param {number} beforeSeconds - Seconds before each timestamp\n * @param {number} afterSeconds - Seconds after each timestamp\n * @returns {Array} Array of clipped recordings\n */\nexport function createMultipleClips(events, timestamps, beforeSeconds = 5, afterSeconds = 5) {\n  const clips = [];\n  for (let i = 0; i < timestamps.length; i++) {\n    const timestamp = timestamps[i];\n    try {\n      const clip = cutRecording(events, timestamp, beforeSeconds, afterSeconds);\n      clips.push({\n        index: i,\n        centerTimestamp: timestamp,\n        events: clip,\n        duration: beforeSeconds + afterSeconds\n      });\n    } catch (error) {\n      console.error(`Failed to create clip ${i} around timestamp ${timestamp}:`, error);\n    }\n  }\n  return clips;\n}","map":{"version":3,"names":["relativeTimeToTimestamp","events","relativeSeconds","length","startTime","timestamp","timestampToRelativeTime","formatTime","seconds","hours","Math","floor","minutes","secs","toString","padStart","parseTimeString","timeStr","test","parseInt","parts","split","map","Number","createSyntheticSnapshot","baseSnapshot","targetTimestamp","console","log","cutRecording","centerTimeSeconds","beforeSeconds","afterSeconds","Array","isArray","Error","centerTimestamp","beforeMs","afterMs","endTime","fullSnapshot","fullSnapshotTime","event","type","find","syntheticSnapshot","clippedEvents","filter","finalEvents","nextEvent","prevEvents","newEvents","push","lastTimestamp","data","href","window","location","sort","a","b","findEventsByType","eventType","findEventsByContent","searchTerm","matchingEvents","eventStr","JSON","stringify","toLowerCase","includes","analyzeRecording","firstTimestamp","duration","eventTypeCounts","totalEvents","eventTypes","createMultipleClips","timestamps","clips","i","clip","index","error"],"sources":["/Users/ogonen/rrweb/src/RecordingCutter.js"],"sourcesContent":["// RecordingCutter.js - Utility for cutting rrweb recordings into smaller clips\n\n/**\n * Converts relative seconds to absolute timestamp\n * @param {Array} events - rrweb events array\n * @param {number} relativeSeconds - Seconds from start of recording\n * @returns {number} Absolute timestamp\n */\nexport function relativeTimeToTimestamp(events, relativeSeconds) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return startTime + relativeSeconds * 1000;\n}\n\n/**\n * Converts absolute timestamp to relative seconds\n * @param {Array} events - rrweb events array\n * @param {number} timestamp - Absolute timestamp\n * @returns {number} Relative seconds from start\n */\nexport function timestampToRelativeTime(events, timestamp) {\n  if (!events || events.length === 0) return 0;\n  const startTime = events[0].timestamp;\n  return (timestamp - startTime) / 1000;\n}\n\n/**\n * Formats seconds as MM:SS or HH:MM:SS\n * @param {number} seconds - Total seconds\n * @returns {string} Formatted time string\n */\nexport function formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${secs\n      .toString()\n      .padStart(2, \"0\")}`;\n  }\n  return `${minutes}:${secs.toString().padStart(2, \"0\")}`;\n}\n\n/**\n * Parses time string (MM:SS, HH:MM:SS, or just seconds) to total seconds\n * @param {string} timeStr - Time string like \"1:30\", \"0:05\", \"90\", etc.\n * @returns {number} Total seconds\n */\nexport function parseTimeString(timeStr) {\n  if (!timeStr) return 0;\n\n  // If it's just a number, treat as seconds\n  if (/^\\d+$/.test(timeStr)) {\n    return parseInt(timeStr);\n  }\n\n  // Parse MM:SS or HH:MM:SS format\n  const parts = timeStr.split(\":\").map(Number);\n  if (parts.length === 2) {\n    // MM:SS\n    return parts[0] * 60 + parts[1];\n  } else if (parts.length === 3) {\n    // HH:MM:SS\n    return parts[0] * 3600 + parts[1] * 60 + parts[2];\n  }\n\n  return 0;\n}\n\n/**\n * Creates a synthetic full snapshot by applying all incremental changes\n * up to a specific timestamp\n * @param {Array} events - Original rrweb events array\n * @param {Object} baseSnapshot - The base full snapshot to start from\n * @param {number} targetTimestamp - The timestamp to build the DOM state up to\n * @returns {Object} Synthetic full snapshot representing the DOM state at targetTimestamp\n */\nfunction createSyntheticSnapshot(events, baseSnapshot, targetTimestamp) {\n  // For now, let's use a simplified approach\n  // We'll just return the base snapshot with adjusted timing\n  // In the future, this could be enhanced to actually merge DOM changes\n  console.log(\n    `Creating synthetic snapshot at ${targetTimestamp} from base at ${baseSnapshot.timestamp}`\n  );\n\n  return {\n    ...baseSnapshot,\n    timestamp: targetTimestamp,\n  };\n}\n\n/**\n * Cuts an rrweb recording to show only events within a specific time range\n * @param {Array} events - Original rrweb events array\n * @param {number} centerTimeSeconds - Relative time in seconds from start of recording\n * @param {number} beforeSeconds - Seconds to include before the center time (default: 5)\n * @param {number} afterSeconds - Seconds to include after the center time (default: 5)\n * @returns {Array} New rrweb events array for the clipped recording\n */\nexport function cutRecording(\n  events,\n  centerTimeSeconds,\n  beforeSeconds = 5,\n  afterSeconds = 5\n) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    throw new Error(\"Invalid events array provided\");\n  }\n\n  // Convert relative time to absolute timestamp\n  const centerTimestamp = relativeTimeToTimestamp(events, centerTimeSeconds);\n\n  const beforeMs = beforeSeconds * 1000;\n  const afterMs = afterSeconds * 1000;\n  const startTime = centerTimestamp - beforeMs;\n  const endTime = centerTimestamp + afterMs;\n\n  console.log(\n    `Cutting recording around ${formatTime(\n      centerTimeSeconds\n    )} (${centerTimeSeconds}s)`\n  );\n  console.log(\n    `Time range: ${formatTime(\n      centerTimeSeconds - beforeSeconds\n    )} to ${formatTime(centerTimeSeconds + afterSeconds)}`\n  );\n\n  // Find the full snapshot (type 2) that's closest to but before our start time\n  let fullSnapshot = null;\n  let fullSnapshotTime = 0;\n\n  for (const event of events) {\n    if (event.type === 2 && event.timestamp <= startTime) {\n      if (!fullSnapshot || event.timestamp > fullSnapshotTime) {\n        fullSnapshot = event;\n        fullSnapshotTime = event.timestamp;\n      }\n    }\n  }\n\n  // If no full snapshot found before start time, use the first one\n  if (!fullSnapshot) {\n    fullSnapshot = events.find((event) => event.type === 2);\n    if (!fullSnapshot) {\n      throw new Error(\"No full snapshot found in recording\");\n    }\n  }\n\n  // Create a synthetic full snapshot by applying all changes up to startTime\n  const syntheticSnapshot = createSyntheticSnapshot(\n    events,\n    fullSnapshot,\n    startTime\n  );\n\n  // Filter events within our time range (after the start time)\n  const clippedEvents = events.filter((event) => {\n    return event.timestamp >= startTime && event.timestamp <= endTime;\n  });\n\n  // If we don't have enough events, expand the range to get at least 1 more event\n  let finalEvents = clippedEvents;\n  if (clippedEvents.length === 0) {\n    // No events in range, find the next event after startTime\n    const nextEvent = events.find((event) => event.timestamp > startTime);\n    if (nextEvent) {\n      finalEvents = [nextEvent];\n    } else {\n      // No events after startTime, find the previous event\n      const prevEvents = events.filter((event) => event.timestamp < startTime);\n      if (prevEvents.length > 0) {\n        finalEvents = [prevEvents[prevEvents.length - 1]];\n      }\n    }\n  }\n\n  // Create the new events array\n  const newEvents = [];\n\n  // Add the synthetic full snapshot at the start time\n  newEvents.push({\n    ...syntheticSnapshot,\n    timestamp: startTime,\n  });\n\n  // Add all events in our clip range\n  for (const event of finalEvents) {\n    newEvents.push({\n      ...event,\n      timestamp: event.timestamp,\n    });\n  }\n\n  // Ensure we have at least 2 events total\n  if (newEvents.length < 2) {\n    // Add a dummy event if we still don't have enough\n    const lastTimestamp = newEvents[newEvents.length - 1].timestamp;\n    newEvents.push({\n      type: 4, // Meta event\n      data: { href: window.location.href },\n      timestamp: lastTimestamp + 100,\n    });\n  }\n\n  // Sort by timestamp to ensure proper order\n  newEvents.sort((a, b) => a.timestamp - b.timestamp);\n\n  console.log(`Original recording: ${events.length} events`);\n  console.log(`Clipped recording: ${newEvents.length} events`);\n  console.log(`Time span: ${beforeSeconds + afterSeconds} seconds`);\n\n  return newEvents;\n}\n\n/**\n * Finds all events of a specific type within a recording\n * @param {Array} events - rrweb events array\n * @param {number} eventType - Event type to search for (1=DOM, 2=FullSnapshot, 3=IncrementalSnapshot, etc.)\n * @returns {Array} Array of events matching the type\n */\nexport function findEventsByType(events, eventType) {\n  return events.filter((event) => event.type === eventType);\n}\n\n/**\n * Finds events containing specific text or attributes\n * @param {Array} events - rrweb events array\n * @param {string} searchTerm - Text to search for\n * @returns {Array} Array of events containing the search term\n */\nexport function findEventsByContent(events, searchTerm) {\n  const matchingEvents = [];\n\n  for (const event of events) {\n    const eventStr = JSON.stringify(event).toLowerCase();\n    if (eventStr.includes(searchTerm.toLowerCase())) {\n      matchingEvents.push(event);\n    }\n  }\n\n  return matchingEvents;\n}\n\n/**\n * Analyzes a recording and provides statistics\n * @param {Array} events - rrweb events array\n * @returns {Object} Recording statistics\n */\nexport function analyzeRecording(events) {\n  if (!events || !Array.isArray(events) || events.length === 0) {\n    return null;\n  }\n\n  const firstTimestamp = events[0].timestamp;\n  const lastTimestamp = events[events.length - 1].timestamp;\n  const duration = (lastTimestamp - firstTimestamp) / 1000; // in seconds\n\n  const eventTypeCounts = {};\n  for (const event of events) {\n    eventTypeCounts[event.type] = (eventTypeCounts[event.type] || 0) + 1;\n  }\n\n  return {\n    totalEvents: events.length,\n    duration: duration,\n    startTime: firstTimestamp,\n    endTime: lastTimestamp,\n    eventTypeCounts: eventTypeCounts,\n    eventTypes: {\n      1: \"DomContentLoaded\",\n      2: \"FullSnapshot\",\n      3: \"IncrementalSnapshot\",\n      4: \"Meta\",\n      5: \"Custom\",\n      6: \"Plugin\",\n    },\n  };\n}\n\n/**\n * Creates multiple clips around specified timestamps\n * @param {Array} events - Original rrweb events array\n * @param {Array} timestamps - Array of timestamps to create clips around\n * @param {number} beforeSeconds - Seconds before each timestamp\n * @param {number} afterSeconds - Seconds after each timestamp\n * @returns {Array} Array of clipped recordings\n */\nexport function createMultipleClips(\n  events,\n  timestamps,\n  beforeSeconds = 5,\n  afterSeconds = 5\n) {\n  const clips = [];\n\n  for (let i = 0; i < timestamps.length; i++) {\n    const timestamp = timestamps[i];\n    try {\n      const clip = cutRecording(events, timestamp, beforeSeconds, afterSeconds);\n      clips.push({\n        index: i,\n        centerTimestamp: timestamp,\n        events: clip,\n        duration: beforeSeconds + afterSeconds,\n      });\n    } catch (error) {\n      console.error(\n        `Failed to create clip ${i} around timestamp ${timestamp}:`,\n        error\n      );\n    }\n  }\n\n  return clips;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}