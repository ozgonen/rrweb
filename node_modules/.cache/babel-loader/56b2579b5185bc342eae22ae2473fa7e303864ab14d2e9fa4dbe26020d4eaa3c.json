{"ast":null,"code":"class StackFrame {\n  constructor(obj) {\n    this.fileName = obj.fileName || '';\n    this.functionName = obj.functionName || '';\n    this.lineNumber = obj.lineNumber;\n    this.columnNumber = obj.columnNumber;\n  }\n  toString() {\n    const lineNumber = this.lineNumber || '';\n    const columnNumber = this.columnNumber || '';\n    if (this.functionName) return `${this.functionName} (${this.fileName}:${lineNumber}:${columnNumber})`;\n    return `${this.fileName}:${lineNumber}:${columnNumber}`;\n  }\n}\nconst FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nconst CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nconst SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nconst ErrorStackParser = {\n  parse: function (error) {\n    if (!error) {\n      return [];\n    }\n    if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error('Cannot parse given Error object');\n    }\n  },\n  extractLocation: function (urlLike) {\n    if (urlLike.indexOf(':') === -1) {\n      return [urlLike];\n    }\n    const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    const parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n    if (!parts) throw new Error(`Cannot parse given url: ${urlLike}`);\n    return [parts[1], parts[2] || undefined, parts[3] || undefined];\n  },\n  parseV8OrIE: function (error) {\n    const filtered = error.stack.split('\\n').filter(function (line) {\n      return !!line.match(CHROME_IE_STACK_REGEXP);\n    }, this);\n    return filtered.map(function (line) {\n      if (line.indexOf('(eval ') > -1) {\n        line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\n      }\n      let sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(');\n      const location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;\n      const tokens = sanitizedLine.split(/\\s+/).slice(1);\n      const locationParts = this.extractLocation(location ? location[1] : tokens.pop());\n      const functionName = tokens.join(' ') || undefined;\n      const fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n      return new StackFrame({\n        functionName,\n        fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2]\n      });\n    }, this);\n  },\n  parseFFOrSafari: function (error) {\n    const filtered = error.stack.split('\\n').filter(function (line) {\n      return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n    }, this);\n    return filtered.map(function (line) {\n      if (line.indexOf(' > eval') > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n      }\n      if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n        return new StackFrame({\n          functionName: line\n        });\n      } else {\n        const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        const matches = line.match(functionNameRegex);\n        const functionName = matches && matches[1] ? matches[1] : undefined;\n        const locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n        return new StackFrame({\n          functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2]\n        });\n      }\n    }, this);\n  },\n  parseOpera: function (e) {\n    if (!e.stacktrace || e.message.indexOf('\\n') > -1 && e.message.split('\\n').length > e.stacktrace.split('\\n').length) {\n      return this.parseOpera9(e);\n    } else if (!e.stack) {\n      return this.parseOpera10(e);\n    } else {\n      return this.parseOpera11(e);\n    }\n  },\n  parseOpera9: function (e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    const lines = e.message.split('\\n');\n    const result = [];\n    for (let i = 2, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(new StackFrame({\n          fileName: match[2],\n          lineNumber: parseFloat(match[1])\n        }));\n      }\n    }\n    return result;\n  },\n  parseOpera10: function (e) {\n    const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    const lines = e.stacktrace.split('\\n');\n    const result = [];\n    for (let i = 0, len = lines.length; i < len; i += 2) {\n      const match = lineRE.exec(lines[i]);\n      if (match) {\n        result.push(new StackFrame({\n          functionName: match[3] || undefined,\n          fileName: match[2],\n          lineNumber: parseFloat(match[1])\n        }));\n      }\n    }\n    return result;\n  },\n  parseOpera11: function (error) {\n    const filtered = error.stack.split('\\n').filter(function (line) {\n      return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n    }, this);\n    return filtered.map(function (line) {\n      const tokens = line.split('@');\n      const locationParts = this.extractLocation(tokens.pop());\n      const functionCall = tokens.shift() || '';\n      const functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, '$2').replace(/\\([^)]*\\)/g, '') || undefined;\n      return new StackFrame({\n        functionName,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2]\n      });\n    }, this);\n  }\n};\nexport { ErrorStackParser, StackFrame };","map":{"version":3,"names":["StackFrame","constructor","obj","fileName","functionName","lineNumber","columnNumber","toString","FIREFOX_SAFARI_STACK_REGEXP","CHROME_IE_STACK_REGEXP","SAFARI_NATIVE_CODE_REGEXP","ErrorStackParser","parse","error","stacktrace","parseOpera","stack","match","parseV8OrIE","parseFFOrSafari","Error","extractLocation","urlLike","indexOf","regExp","parts","exec","replace","undefined","filtered","split","filter","line","map","sanitizedLine","location","tokens","slice","locationParts","pop","join","functionNameRegex","matches","e","message","length","parseOpera9","parseOpera10","parseOpera11","lineRE","lines","result","i","len","push","parseFloat","functionCall","shift"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrweb/src/plugins/console/record/error-stack-parser.js"],"sourcesContent":["class StackFrame {\r\n    constructor(obj) {\r\n        this.fileName = obj.fileName || '';\r\n        this.functionName = obj.functionName || '';\r\n        this.lineNumber = obj.lineNumber;\r\n        this.columnNumber = obj.columnNumber;\r\n    }\r\n    toString() {\r\n        const lineNumber = this.lineNumber || '';\r\n        const columnNumber = this.columnNumber || '';\r\n        if (this.functionName)\r\n            return `${this.functionName} (${this.fileName}:${lineNumber}:${columnNumber})`;\r\n        return `${this.fileName}:${lineNumber}:${columnNumber}`;\r\n    }\r\n}\r\nconst FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\r\nconst CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\r\nconst SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\r\nconst ErrorStackParser = {\r\n    parse: function (error) {\r\n        if (!error) {\r\n            return [];\r\n        }\r\n        if (typeof error.stacktrace !== 'undefined' ||\r\n            typeof error['opera#sourceloc'] !== 'undefined') {\r\n            return this.parseOpera(error);\r\n        }\r\n        else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\r\n            return this.parseV8OrIE(error);\r\n        }\r\n        else if (error.stack) {\r\n            return this.parseFFOrSafari(error);\r\n        }\r\n        else {\r\n            throw new Error('Cannot parse given Error object');\r\n        }\r\n    },\r\n    extractLocation: function (urlLike) {\r\n        if (urlLike.indexOf(':') === -1) {\r\n            return [urlLike];\r\n        }\r\n        const regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\r\n        const parts = regExp.exec(urlLike.replace(/[()]/g, ''));\r\n        if (!parts)\r\n            throw new Error(`Cannot parse given url: ${urlLike}`);\r\n        return [parts[1], parts[2] || undefined, parts[3] || undefined];\r\n    },\r\n    parseV8OrIE: function (error) {\r\n        const filtered = error.stack.split('\\n').filter(function (line) {\r\n            return !!line.match(CHROME_IE_STACK_REGEXP);\r\n        }, this);\r\n        return filtered.map(function (line) {\r\n            if (line.indexOf('(eval ') > -1) {\r\n                line = line\r\n                    .replace(/eval code/g, 'eval')\r\n                    .replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\r\n            }\r\n            let sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(');\r\n            const location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/);\r\n            sanitizedLine = location\r\n                ? sanitizedLine.replace(location[0], '')\r\n                : sanitizedLine;\r\n            const tokens = sanitizedLine.split(/\\s+/).slice(1);\r\n            const locationParts = this.extractLocation(location ? location[1] : tokens.pop());\r\n            const functionName = tokens.join(' ') || undefined;\r\n            const fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1\r\n                ? undefined\r\n                : locationParts[0];\r\n            return new StackFrame({\r\n                functionName,\r\n                fileName,\r\n                lineNumber: locationParts[1],\r\n                columnNumber: locationParts[2],\r\n            });\r\n        }, this);\r\n    },\r\n    parseFFOrSafari: function (error) {\r\n        const filtered = error.stack.split('\\n').filter(function (line) {\r\n            return !line.match(SAFARI_NATIVE_CODE_REGEXP);\r\n        }, this);\r\n        return filtered.map(function (line) {\r\n            if (line.indexOf(' > eval') > -1) {\r\n                line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\r\n            }\r\n            if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\r\n                return new StackFrame({\r\n                    functionName: line,\r\n                });\r\n            }\r\n            else {\r\n                const functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\r\n                const matches = line.match(functionNameRegex);\r\n                const functionName = matches && matches[1] ? matches[1] : undefined;\r\n                const locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\r\n                return new StackFrame({\r\n                    functionName,\r\n                    fileName: locationParts[0],\r\n                    lineNumber: locationParts[1],\r\n                    columnNumber: locationParts[2],\r\n                });\r\n            }\r\n        }, this);\r\n    },\r\n    parseOpera: function (e) {\r\n        if (!e.stacktrace ||\r\n            (e.message.indexOf('\\n') > -1 &&\r\n                e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\r\n            return this.parseOpera9(e);\r\n        }\r\n        else if (!e.stack) {\r\n            return this.parseOpera10(e);\r\n        }\r\n        else {\r\n            return this.parseOpera11(e);\r\n        }\r\n    },\r\n    parseOpera9: function (e) {\r\n        const lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\r\n        const lines = e.message.split('\\n');\r\n        const result = [];\r\n        for (let i = 2, len = lines.length; i < len; i += 2) {\r\n            const match = lineRE.exec(lines[i]);\r\n            if (match) {\r\n                result.push(new StackFrame({\r\n                    fileName: match[2],\r\n                    lineNumber: parseFloat(match[1]),\r\n                }));\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    parseOpera10: function (e) {\r\n        const lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\r\n        const lines = e.stacktrace.split('\\n');\r\n        const result = [];\r\n        for (let i = 0, len = lines.length; i < len; i += 2) {\r\n            const match = lineRE.exec(lines[i]);\r\n            if (match) {\r\n                result.push(new StackFrame({\r\n                    functionName: match[3] || undefined,\r\n                    fileName: match[2],\r\n                    lineNumber: parseFloat(match[1]),\r\n                }));\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    parseOpera11: function (error) {\r\n        const filtered = error.stack.split('\\n').filter(function (line) {\r\n            return (!!line.match(FIREFOX_SAFARI_STACK_REGEXP) &&\r\n                !line.match(/^Error created at/));\r\n        }, this);\r\n        return filtered.map(function (line) {\r\n            const tokens = line.split('@');\r\n            const locationParts = this.extractLocation(tokens.pop());\r\n            const functionCall = tokens.shift() || '';\r\n            const functionName = functionCall\r\n                .replace(/<anonymous function(: (\\w+))?>/, '$2')\r\n                .replace(/\\([^)]*\\)/g, '') || undefined;\r\n            return new StackFrame({\r\n                functionName,\r\n                fileName: locationParts[0],\r\n                lineNumber: locationParts[1],\r\n                columnNumber: locationParts[2],\r\n            });\r\n        }, this);\r\n    },\r\n};\n\nexport { ErrorStackParser, StackFrame };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}