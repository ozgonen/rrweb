{"ast":null,"code":"import { encode } from './../../../../../../ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js';\nconst canvasVarMap = new Map();\nfunction variableListFor(ctx, ctor) {\n  let contextMap = canvasVarMap.get(ctx);\n  if (!contextMap) {\n    contextMap = new Map();\n    canvasVarMap.set(ctx, contextMap);\n  }\n  if (!contextMap.has(ctor)) {\n    contextMap.set(ctor, []);\n  }\n  return contextMap.get(ctor);\n}\nconst saveWebGLVar = (value, win, ctx) => {\n  if (!value || !(isInstanceOfWebGLObject(value, win) || typeof value === 'object')) return;\n  const name = value.constructor.name;\n  const list = variableListFor(ctx, name);\n  let index = list.indexOf(value);\n  if (index === -1) {\n    index = list.length;\n    list.push(value);\n  }\n  return index;\n};\nfunction serializeArg(value, win, ctx) {\n  if (value instanceof Array) {\n    return value.map(arg => serializeArg(arg, win, ctx));\n  } else if (value === null) {\n    return value;\n  } else if (value instanceof Float32Array || value instanceof Float64Array || value instanceof Int32Array || value instanceof Uint32Array || value instanceof Uint8Array || value instanceof Uint16Array || value instanceof Int16Array || value instanceof Int8Array || value instanceof Uint8ClampedArray) {\n    const name = value.constructor.name;\n    return {\n      rr_type: name,\n      args: [Object.values(value)]\n    };\n  } else if (value instanceof ArrayBuffer) {\n    const name = value.constructor.name;\n    const base64 = encode(value);\n    return {\n      rr_type: name,\n      base64\n    };\n  } else if (value instanceof DataView) {\n    const name = value.constructor.name;\n    return {\n      rr_type: name,\n      args: [serializeArg(value.buffer, win, ctx), value.byteOffset, value.byteLength]\n    };\n  } else if (value instanceof HTMLImageElement) {\n    const name = value.constructor.name;\n    const {\n      src\n    } = value;\n    return {\n      rr_type: name,\n      src\n    };\n  } else if (value instanceof HTMLCanvasElement) {\n    const name = 'HTMLImageElement';\n    const src = value.toDataURL();\n    return {\n      rr_type: name,\n      src\n    };\n  } else if (value instanceof ImageData) {\n    const name = value.constructor.name;\n    return {\n      rr_type: name,\n      args: [serializeArg(value.data, win, ctx), value.width, value.height]\n    };\n  } else if (isInstanceOfWebGLObject(value, win) || typeof value === 'object') {\n    const name = value.constructor.name;\n    const index = saveWebGLVar(value, win, ctx);\n    return {\n      rr_type: name,\n      index: index\n    };\n  }\n  return value;\n}\nconst serializeArgs = (args, win, ctx) => {\n  return [...args].map(arg => serializeArg(arg, win, ctx));\n};\nconst isInstanceOfWebGLObject = (value, win) => {\n  const webGLConstructorNames = ['WebGLActiveInfo', 'WebGLBuffer', 'WebGLFramebuffer', 'WebGLProgram', 'WebGLRenderbuffer', 'WebGLShader', 'WebGLShaderPrecisionFormat', 'WebGLTexture', 'WebGLUniformLocation', 'WebGLVertexArrayObject', 'WebGLVertexArrayObjectOES'];\n  const supportedWebGLConstructorNames = webGLConstructorNames.filter(name => typeof win[name] === 'function');\n  return Boolean(supportedWebGLConstructorNames.find(name => value instanceof win[name]));\n};\nexport { isInstanceOfWebGLObject, saveWebGLVar, serializeArg, serializeArgs, variableListFor };","map":{"version":3,"names":["encode","canvasVarMap","Map","variableListFor","ctx","ctor","contextMap","get","set","has","saveWebGLVar","value","win","isInstanceOfWebGLObject","name","constructor","list","index","indexOf","length","push","serializeArg","Array","map","arg","Float32Array","Float64Array","Int32Array","Uint32Array","Uint8Array","Uint16Array","Int16Array","Int8Array","Uint8ClampedArray","rr_type","args","Object","values","ArrayBuffer","base64","DataView","buffer","byteOffset","byteLength","HTMLImageElement","src","HTMLCanvasElement","toDataURL","ImageData","data","width","height","serializeArgs","webGLConstructorNames","supportedWebGLConstructorNames","filter","Boolean","find"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/serialize-args.js"],"sourcesContent":["import { encode } from './../../../../../../ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js';\n\nconst canvasVarMap = new Map();\r\nfunction variableListFor(ctx, ctor) {\r\n    let contextMap = canvasVarMap.get(ctx);\r\n    if (!contextMap) {\r\n        contextMap = new Map();\r\n        canvasVarMap.set(ctx, contextMap);\r\n    }\r\n    if (!contextMap.has(ctor)) {\r\n        contextMap.set(ctor, []);\r\n    }\r\n    return contextMap.get(ctor);\r\n}\r\nconst saveWebGLVar = (value, win, ctx) => {\r\n    if (!value ||\r\n        !(isInstanceOfWebGLObject(value, win) || typeof value === 'object'))\r\n        return;\r\n    const name = value.constructor.name;\r\n    const list = variableListFor(ctx, name);\r\n    let index = list.indexOf(value);\r\n    if (index === -1) {\r\n        index = list.length;\r\n        list.push(value);\r\n    }\r\n    return index;\r\n};\r\nfunction serializeArg(value, win, ctx) {\r\n    if (value instanceof Array) {\r\n        return value.map((arg) => serializeArg(arg, win, ctx));\r\n    }\r\n    else if (value === null) {\r\n        return value;\r\n    }\r\n    else if (value instanceof Float32Array ||\r\n        value instanceof Float64Array ||\r\n        value instanceof Int32Array ||\r\n        value instanceof Uint32Array ||\r\n        value instanceof Uint8Array ||\r\n        value instanceof Uint16Array ||\r\n        value instanceof Int16Array ||\r\n        value instanceof Int8Array ||\r\n        value instanceof Uint8ClampedArray) {\r\n        const name = value.constructor.name;\r\n        return {\r\n            rr_type: name,\r\n            args: [Object.values(value)],\r\n        };\r\n    }\r\n    else if (value instanceof ArrayBuffer) {\r\n        const name = value.constructor.name;\r\n        const base64 = encode(value);\r\n        return {\r\n            rr_type: name,\r\n            base64,\r\n        };\r\n    }\r\n    else if (value instanceof DataView) {\r\n        const name = value.constructor.name;\r\n        return {\r\n            rr_type: name,\r\n            args: [\r\n                serializeArg(value.buffer, win, ctx),\r\n                value.byteOffset,\r\n                value.byteLength,\r\n            ],\r\n        };\r\n    }\r\n    else if (value instanceof HTMLImageElement) {\r\n        const name = value.constructor.name;\r\n        const { src } = value;\r\n        return {\r\n            rr_type: name,\r\n            src,\r\n        };\r\n    }\r\n    else if (value instanceof HTMLCanvasElement) {\r\n        const name = 'HTMLImageElement';\r\n        const src = value.toDataURL();\r\n        return {\r\n            rr_type: name,\r\n            src,\r\n        };\r\n    }\r\n    else if (value instanceof ImageData) {\r\n        const name = value.constructor.name;\r\n        return {\r\n            rr_type: name,\r\n            args: [serializeArg(value.data, win, ctx), value.width, value.height],\r\n        };\r\n    }\r\n    else if (isInstanceOfWebGLObject(value, win) || typeof value === 'object') {\r\n        const name = value.constructor.name;\r\n        const index = saveWebGLVar(value, win, ctx);\r\n        return {\r\n            rr_type: name,\r\n            index: index,\r\n        };\r\n    }\r\n    return value;\r\n}\r\nconst serializeArgs = (args, win, ctx) => {\r\n    return [...args].map((arg) => serializeArg(arg, win, ctx));\r\n};\r\nconst isInstanceOfWebGLObject = (value, win) => {\r\n    const webGLConstructorNames = [\r\n        'WebGLActiveInfo',\r\n        'WebGLBuffer',\r\n        'WebGLFramebuffer',\r\n        'WebGLProgram',\r\n        'WebGLRenderbuffer',\r\n        'WebGLShader',\r\n        'WebGLShaderPrecisionFormat',\r\n        'WebGLTexture',\r\n        'WebGLUniformLocation',\r\n        'WebGLVertexArrayObject',\r\n        'WebGLVertexArrayObjectOES',\r\n    ];\r\n    const supportedWebGLConstructorNames = webGLConstructorNames.filter((name) => typeof win[name] === 'function');\r\n    return Boolean(supportedWebGLConstructorNames.find((name) => value instanceof win[name]));\r\n};\n\nexport { isInstanceOfWebGLObject, saveWebGLVar, serializeArg, serializeArgs, variableListFor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}