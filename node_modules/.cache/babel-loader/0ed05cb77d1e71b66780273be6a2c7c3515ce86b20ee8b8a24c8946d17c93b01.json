{"ast":null,"code":"import { __awaiter } from './../../../../../ext/tslib/tslib.es6.js';\nimport { decode } from './../../../../../ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js';\nconst webGLVarMap = new Map();\nfunction variableListFor(ctx, ctor) {\n  let contextMap = webGLVarMap.get(ctx);\n  if (!contextMap) {\n    contextMap = new Map();\n    webGLVarMap.set(ctx, contextMap);\n  }\n  if (!contextMap.has(ctor)) {\n    contextMap.set(ctor, []);\n  }\n  return contextMap.get(ctor);\n}\nfunction deserializeArg(imageMap, ctx, preload) {\n  return arg => __awaiter(this, void 0, void 0, function* () {\n    if (arg && typeof arg === 'object' && 'rr_type' in arg) {\n      if (preload) preload.isUnchanged = false;\n      if (arg.rr_type === 'ImageBitmap' && 'args' in arg) {\n        const args = yield deserializeArg(imageMap, ctx, preload)(arg.args);\n        return yield createImageBitmap.apply(null, args);\n      } else if ('index' in arg) {\n        if (preload || ctx === null) return arg;\n        const {\n          rr_type: name,\n          index\n        } = arg;\n        return variableListFor(ctx, name)[index];\n      } else if ('args' in arg) {\n        const {\n          rr_type: name,\n          args\n        } = arg;\n        const ctor = window[name];\n        return new ctor(...(yield Promise.all(args.map(deserializeArg(imageMap, ctx, preload)))));\n      } else if ('base64' in arg) {\n        return decode(arg.base64);\n      } else if ('src' in arg) {\n        const image = imageMap.get(arg.src);\n        if (image) {\n          return image;\n        } else {\n          const image = new Image();\n          image.src = arg.src;\n          imageMap.set(arg.src, image);\n          return image;\n        }\n      } else if ('data' in arg && arg.rr_type === 'Blob') {\n        const blobContents = yield Promise.all(arg.data.map(deserializeArg(imageMap, ctx, preload)));\n        const blob = new Blob(blobContents, {\n          type: arg.type\n        });\n        return blob;\n      }\n    } else if (Array.isArray(arg)) {\n      const result = yield Promise.all(arg.map(deserializeArg(imageMap, ctx, preload)));\n      return result;\n    }\n    return arg;\n  });\n}\nexport { deserializeArg, variableListFor };","map":{"version":3,"names":["__awaiter","decode","webGLVarMap","Map","variableListFor","ctx","ctor","contextMap","get","set","has","deserializeArg","imageMap","preload","arg","isUnchanged","rr_type","args","createImageBitmap","apply","name","index","window","Promise","all","map","base64","image","src","Image","blobContents","data","blob","Blob","type","Array","isArray","result"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrweb/src/replay/canvas/deserialize-args.js"],"sourcesContent":["import { __awaiter } from './../../../../../ext/tslib/tslib.es6.js';\nimport { decode } from './../../../../../ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js';\n\nconst webGLVarMap = new Map();\r\nfunction variableListFor(ctx, ctor) {\r\n    let contextMap = webGLVarMap.get(ctx);\r\n    if (!contextMap) {\r\n        contextMap = new Map();\r\n        webGLVarMap.set(ctx, contextMap);\r\n    }\r\n    if (!contextMap.has(ctor)) {\r\n        contextMap.set(ctor, []);\r\n    }\r\n    return contextMap.get(ctor);\r\n}\r\nfunction deserializeArg(imageMap, ctx, preload) {\r\n    return (arg) => __awaiter(this, void 0, void 0, function* () {\r\n        if (arg && typeof arg === 'object' && 'rr_type' in arg) {\r\n            if (preload)\r\n                preload.isUnchanged = false;\r\n            if (arg.rr_type === 'ImageBitmap' && 'args' in arg) {\r\n                const args = yield deserializeArg(imageMap, ctx, preload)(arg.args);\r\n                return yield createImageBitmap.apply(null, args);\r\n            }\r\n            else if ('index' in arg) {\r\n                if (preload || ctx === null)\r\n                    return arg;\r\n                const { rr_type: name, index } = arg;\r\n                return variableListFor(ctx, name)[index];\r\n            }\r\n            else if ('args' in arg) {\r\n                const { rr_type: name, args } = arg;\r\n                const ctor = window[name];\r\n                return new ctor(...(yield Promise.all(args.map(deserializeArg(imageMap, ctx, preload)))));\r\n            }\r\n            else if ('base64' in arg) {\r\n                return decode(arg.base64);\r\n            }\r\n            else if ('src' in arg) {\r\n                const image = imageMap.get(arg.src);\r\n                if (image) {\r\n                    return image;\r\n                }\r\n                else {\r\n                    const image = new Image();\r\n                    image.src = arg.src;\r\n                    imageMap.set(arg.src, image);\r\n                    return image;\r\n                }\r\n            }\r\n            else if ('data' in arg && arg.rr_type === 'Blob') {\r\n                const blobContents = yield Promise.all(arg.data.map(deserializeArg(imageMap, ctx, preload)));\r\n                const blob = new Blob(blobContents, {\r\n                    type: arg.type,\r\n                });\r\n                return blob;\r\n            }\r\n        }\r\n        else if (Array.isArray(arg)) {\r\n            const result = yield Promise.all(arg.map(deserializeArg(imageMap, ctx, preload)));\r\n            return result;\r\n        }\r\n        return arg;\r\n    });\r\n}\n\nexport { deserializeArg, variableListFor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}