{"ast":null,"code":"import { __awaiter } from './../../../../../ext/tslib/tslib.es6.js';\nimport { CanvasContext } from '../../../../types/dist/types.js';\nimport { deserializeArg, variableListFor } from './deserialize-args.js';\nfunction getContext(target, type) {\n  try {\n    if (type === CanvasContext.WebGL) {\n      return target.getContext('webgl') || target.getContext('experimental-webgl');\n    }\n    return target.getContext('webgl2');\n  } catch (e) {\n    return null;\n  }\n}\nconst WebGLVariableConstructorsNames = ['WebGLActiveInfo', 'WebGLBuffer', 'WebGLFramebuffer', 'WebGLProgram', 'WebGLRenderbuffer', 'WebGLShader', 'WebGLShaderPrecisionFormat', 'WebGLTexture', 'WebGLUniformLocation', 'WebGLVertexArrayObject'];\nfunction saveToWebGLVarMap(ctx, result) {\n  if (!(result === null || result === void 0 ? void 0 : result.constructor)) return;\n  const {\n    name\n  } = result.constructor;\n  if (!WebGLVariableConstructorsNames.includes(name)) return;\n  const variables = variableListFor(ctx, name);\n  if (!variables.includes(result)) variables.push(result);\n}\nfunction webglMutation({\n  mutation,\n  target,\n  type,\n  imageMap,\n  errorHandler\n}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      const ctx = getContext(target, type);\n      if (!ctx) return;\n      if (mutation.setter) {\n        ctx[mutation.property] = mutation.args[0];\n        return;\n      }\n      const original = ctx[mutation.property];\n      const args = yield Promise.all(mutation.args.map(deserializeArg(imageMap, ctx)));\n      const result = original.apply(ctx, args);\n      saveToWebGLVarMap(ctx, result);\n      const debugMode = false;\n      if (debugMode) ;\n    } catch (error) {\n      errorHandler(mutation, error);\n    }\n  });\n}\nexport { webglMutation as default };","map":{"version":3,"names":["__awaiter","CanvasContext","deserializeArg","variableListFor","getContext","target","type","WebGL","e","WebGLVariableConstructorsNames","saveToWebGLVarMap","ctx","result","constructor","name","includes","variables","push","webglMutation","mutation","imageMap","errorHandler","setter","property","args","original","Promise","all","map","apply","debugMode","error","default"],"sources":["/Users/ogonen/rrweb/node_modules/rrweb/es/rrweb/packages/rrweb/src/replay/canvas/webgl.js"],"sourcesContent":["import { __awaiter } from './../../../../../ext/tslib/tslib.es6.js';\nimport { CanvasContext } from '../../../../types/dist/types.js';\nimport { deserializeArg, variableListFor } from './deserialize-args.js';\n\nfunction getContext(target, type) {\r\n    try {\r\n        if (type === CanvasContext.WebGL) {\r\n            return (target.getContext('webgl') || target.getContext('experimental-webgl'));\r\n        }\r\n        return target.getContext('webgl2');\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n}\r\nconst WebGLVariableConstructorsNames = [\r\n    'WebGLActiveInfo',\r\n    'WebGLBuffer',\r\n    'WebGLFramebuffer',\r\n    'WebGLProgram',\r\n    'WebGLRenderbuffer',\r\n    'WebGLShader',\r\n    'WebGLShaderPrecisionFormat',\r\n    'WebGLTexture',\r\n    'WebGLUniformLocation',\r\n    'WebGLVertexArrayObject',\r\n];\r\nfunction saveToWebGLVarMap(ctx, result) {\r\n    if (!(result === null || result === void 0 ? void 0 : result.constructor))\r\n        return;\r\n    const { name } = result.constructor;\r\n    if (!WebGLVariableConstructorsNames.includes(name))\r\n        return;\r\n    const variables = variableListFor(ctx, name);\r\n    if (!variables.includes(result))\r\n        variables.push(result);\r\n}\r\nfunction webglMutation({ mutation, target, type, imageMap, errorHandler, }) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const ctx = getContext(target, type);\r\n            if (!ctx)\r\n                return;\r\n            if (mutation.setter) {\r\n                ctx[mutation.property] = mutation.args[0];\r\n                return;\r\n            }\r\n            const original = ctx[mutation.property];\r\n            const args = yield Promise.all(mutation.args.map(deserializeArg(imageMap, ctx)));\r\n            const result = original.apply(ctx, args);\r\n            saveToWebGLVarMap(ctx, result);\r\n            const debugMode = false;\r\n            if (debugMode) ;\r\n        }\r\n        catch (error) {\r\n            errorHandler(mutation, error);\r\n        }\r\n    });\r\n}\n\nexport { webglMutation as default };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yCAAyC;AACnE,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,cAAc,EAAEC,eAAe,QAAQ,uBAAuB;AAEvE,SAASC,UAAUA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAC9B,IAAI;IACA,IAAIA,IAAI,KAAKL,aAAa,CAACM,KAAK,EAAE;MAC9B,OAAQF,MAAM,CAACD,UAAU,CAAC,OAAO,CAAC,IAAIC,MAAM,CAACD,UAAU,CAAC,oBAAoB,CAAC;IACjF;IACA,OAAOC,MAAM,CAACD,UAAU,CAAC,QAAQ,CAAC;EACtC,CAAC,CACD,OAAOI,CAAC,EAAE;IACN,OAAO,IAAI;EACf;AACJ;AACA,MAAMC,8BAA8B,GAAG,CACnC,iBAAiB,EACjB,aAAa,EACb,kBAAkB,EAClB,cAAc,EACd,mBAAmB,EACnB,aAAa,EACb,4BAA4B,EAC5B,cAAc,EACd,sBAAsB,EACtB,wBAAwB,CAC3B;AACD,SAASC,iBAAiBA,CAACC,GAAG,EAAEC,MAAM,EAAE;EACpC,IAAI,EAAEA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACC,WAAW,CAAC,EACrE;EACJ,MAAM;IAAEC;EAAK,CAAC,GAAGF,MAAM,CAACC,WAAW;EACnC,IAAI,CAACJ,8BAA8B,CAACM,QAAQ,CAACD,IAAI,CAAC,EAC9C;EACJ,MAAME,SAAS,GAAGb,eAAe,CAACQ,GAAG,EAAEG,IAAI,CAAC;EAC5C,IAAI,CAACE,SAAS,CAACD,QAAQ,CAACH,MAAM,CAAC,EAC3BI,SAAS,CAACC,IAAI,CAACL,MAAM,CAAC;AAC9B;AACA,SAASM,aAAaA,CAAC;EAAEC,QAAQ;EAAEd,MAAM;EAAEC,IAAI;EAAEc,QAAQ;EAAEC;AAAc,CAAC,EAAE;EACxE,OAAOrB,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,IAAI;MACA,MAAMW,GAAG,GAAGP,UAAU,CAACC,MAAM,EAAEC,IAAI,CAAC;MACpC,IAAI,CAACK,GAAG,EACJ;MACJ,IAAIQ,QAAQ,CAACG,MAAM,EAAE;QACjBX,GAAG,CAACQ,QAAQ,CAACI,QAAQ,CAAC,GAAGJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;QACzC;MACJ;MACA,MAAMC,QAAQ,GAAGd,GAAG,CAACQ,QAAQ,CAACI,QAAQ,CAAC;MACvC,MAAMC,IAAI,GAAG,MAAME,OAAO,CAACC,GAAG,CAACR,QAAQ,CAACK,IAAI,CAACI,GAAG,CAAC1B,cAAc,CAACkB,QAAQ,EAAET,GAAG,CAAC,CAAC,CAAC;MAChF,MAAMC,MAAM,GAAGa,QAAQ,CAACI,KAAK,CAAClB,GAAG,EAAEa,IAAI,CAAC;MACxCd,iBAAiB,CAACC,GAAG,EAAEC,MAAM,CAAC;MAC9B,MAAMkB,SAAS,GAAG,KAAK;MACvB,IAAIA,SAAS,EAAE;IACnB,CAAC,CACD,OAAOC,KAAK,EAAE;MACVV,YAAY,CAACF,QAAQ,EAAEY,KAAK,CAAC;IACjC;EACJ,CAAC,CAAC;AACN;AAEA,SAASb,aAAa,IAAIc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}